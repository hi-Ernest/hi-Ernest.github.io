<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Always Exploring</title><link>https://hi-ernest.github.io/</link><description>Recent content on Always Exploring</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>chenhuarui2472071@gmail.com (Ernest Chen)</managingEditor><webMaster>chenhuarui2472071@gmail.com (Ernest Chen)</webMaster><copyright>2023 ErnestChen All rights reserved</copyright><lastBuildDate>Sun, 15 Oct 2023 19:54:45 +0800</lastBuildDate><atom:link href="https://hi-ernest.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>国庆日本旅行开销</title><link>https://hi-ernest.github.io/blog/japan-travel-expenses/</link><pubDate>Sun, 15 Oct 2023 19:54:45 +0800</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/japan-travel-expenses/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>国庆第一次出国solo travel，返沪之后，很多朋友问我在日本游玩的开销加上我有统计习惯，于是有了这篇大概得开销账单，供朋友们参考&lt;/p>
&lt;h2 id="前期准备工作">前期准备工作&lt;/h2>
&lt;p>签证、机票、酒店&lt;/p>
&lt;h3 id="签证">签证&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>准备项&lt;/th>
&lt;th>实际选择&lt;/th>
&lt;th>开销&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>办理签证&lt;/td>
&lt;td>&lt;a href="https://www.google.com/search?q=%E5%8C%97%E4%BA%AC%E7%8E%AF%E5%A2%83%E5%9B%BD%E6%97%85%E4%B8%8A%E6%B5%B7%E7%AC%AC%E4%B8%80%E5%BA%97+site%3Ataobao.com&amp;amp;sca_esv=573801698&amp;amp;sxsrf=AM9HkKkr0cqRmzYAGiwEVj-STDkEYOz9_A%3A1697468204113&amp;amp;source=hp&amp;amp;ei=LE8tZcyOBYj0-Qa0m5PADA&amp;amp;iflsig=AO6bgOgAAAAAZS1dPL9Gg-zRmsUnNB9fIvpie2j-V8TO&amp;amp;oq=&amp;amp;gs_lp=Egdnd3Mtd2l6IgAqAggCMgcQIxjqAhgnMgcQIxjqAhgnMgcQIxjqAhgnMgcQIxjqAhgnMgcQIxjqAhgnMgcQIxjqAhgnMgcQIxjqAhgnMgcQIxjqAhgnMgcQIxjqAhgnMgcQIxjqAhgnSI4VUENYxwdwAngAkAEAmAEAoAEAqgEAuAEByAEA-AEC-AEBqAIK&amp;amp;sclient=gws-wiz">旅行社单次旅行日本签证for淘宝&lt;/a>&lt;/td>
&lt;td>299RMB&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>提供了如下材料:&lt;/strong> &lt;br>
1.护照原件复印件（照片）ps：我用iphone的Notes扫描文稿获取，也可以直接拍照 &lt;br>
2.身份证正反复印件（照片）
3.户口本整本复印（除空白页）ps：让母亲用扫描王APP扫完发我&lt;br>
4.35*45白底照片 ps：拿之前证件照使用美图秀秀的证件照功能，高清修改尺寸 &lt;br>
5.赴日申请表 ps：旅行社商家会发给你pdf照着填写即可&lt;br>
6.签证类型确认表 ps：同上旅行社商家会发送填写即可&lt;br>
7.个人理财产品证明10W以上 ps：我使用是支付宝-&amp;gt;余额宝天弘基金开该资产证明，证明附件发送到你指定的邮箱 &lt;br>
8.居住登记凭证+社保单 ps：我从北京到上海只有居住凭证，于是加上北京的社保记录（支付宝-&amp;gt;社保开具），如果有当地居住证只提供居住证证明即可 &lt;br>
PS：我这次电子签耗时七个工作日（09.19将上述资料打包发送客服，09.27收到电子签）&lt;/p>
&lt;h3 id="机票">机票&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>准备项&lt;/th>
&lt;th>实际选择&lt;/th>
&lt;th>开销&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>出行机票&lt;/td>
&lt;td>来回机票：&lt;a href="https://www.flightstats.com/v2/flight-tracker/APJ/898?year=2023&amp;amp;month=10&amp;amp;date=15&amp;amp;flightId=1216725893">上海浦东-&amp;gt;东京羽田&lt;/a> 和 东京成田-&amp;gt;深圳宝安-&amp;gt;上海浦东&lt;/td>
&lt;td>3745RMB&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>去程乐桃航空就是日本航空，感受下日航服务，虽然是低成本航空但是服务还不错，缺点没有免费托运行李，从上海到日本短短两个多小时蛮快。&lt;/p>
&lt;h3 id="酒店">酒店&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>准备项&lt;/th>
&lt;th>实际选择&lt;/th>
&lt;th>开销&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>居住酒店&lt;/td>
&lt;td>&lt;a href="https://www.agoda.com/zh-cn/apa-hotel-higashi-nihonbashi-ekimae/hotel/tokyo-jp.html?finalPriceView=1&amp;amp;isShowMobileAppPrice=false&amp;amp;cid=1731197&amp;amp;numberOfBedrooms=&amp;amp;familyMode=false&amp;amp;adults=2&amp;amp;children=0&amp;amp;rooms=1&amp;amp;maxRooms=0&amp;amp;checkIn=2023-10-2&amp;amp;isCalendarCallout=false&amp;amp;childAges=&amp;amp;numberOfGuest=0&amp;amp;missingChildAges=false&amp;amp;travellerType=1&amp;amp;showReviewSubmissionEntry=false&amp;amp;currencyCode=CNY&amp;amp;isFreeOccSearch=false&amp;amp;isCityHaveAsq=false&amp;amp;los=5&amp;amp;searchrequestid=3e62b482-36d4-4053-8368-1547f63d69d2">APA Hotel Higashi-Nihonbashi-Ekimae(东日本桥站)&lt;/a>&lt;/td>
&lt;td>2713RMB（6天5晚）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>照着日本地铁地图研究下，该酒店就在「东日本桥站」步行十几米抵达，旁边就是711，APA是日本连锁酒店在每个地铁站密集度很高，加上朋友已经居住过体验良好，避免踩坑（感谢小金同学介绍，感谢老曹引荐，以及谢谢在日留学的小鹿同学建议）结果：入住很顺滑，居住睡的很舒服，一般我在外居住酒店第一晚都不习惯，但该酒店床和枕头意想不到的软的恰到好处，那几天睡的都很安逸巴适得板，粘床就睡（也可能累惨了 鬼脸.jpg）&lt;/p>
&lt;h2 id="出行交通">出行交通&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>准备项&lt;/th>
&lt;th>实际选择&lt;/th>
&lt;th>开销&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>地铁&lt;/td>
&lt;td>- iphone钱包添加suica卡(西瓜卡)，NFC刷卡&lt;!-- raw HTML omitted -->- 第一天白天行李箱暂存存储柜（白天去富士河口湖，晚上才去酒店check in）&lt;/td>
&lt;td>400RMB&lt;!-- raw HTML omitted -->（包括第一天存储费70RMB）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>新宿-&amp;gt;河口湖巴士&lt;/td>
&lt;td>到东京早上五点马不停蹄坐地铁到新宿，JR高铁的票路况复杂&lt;!-- raw HTML omitted -->还是考虑by巴士，因为车量多且便宜，路程两个小时多，可以看日本乡间风景&lt;/td>
&lt;td>来回4400JPY -&amp;gt; 213RMB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>河口湖租赁单车&lt;/td>
&lt;td>骑行爬坡鸟居+骑行环湖口湖&lt;/td>
&lt;td>1400JPY（3hours）+ 2000JPY（超时2hours）= 3400JPY -&amp;gt; 165RMB（亏了选了便宜车型，应该租一天）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>出行交通总金额：746RMB&lt;/strong>&lt;/p>
&lt;h2 id="饮食">饮食&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>准备项&lt;/th>
&lt;th>实际选择&lt;/th>
&lt;th>开销&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>10.02在711买东西&lt;/td>
&lt;td>新宿711买早餐面包+饮料 + 富士711买水&lt;/td>
&lt;td>32RMB + 21RMB = 53RMB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10.02在新宿吃拉面&lt;/td>
&lt;td>大晚上随便找一家，感觉不错！（叉烧很多，吧台围着一圈，师傅在圆心内处理食材，现场拉面和切叉烧ing）&lt;/td>
&lt;td>1600JPY -&amp;gt; 78RMB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10.03涩谷汉堡排&lt;/td>
&lt;td>&lt;a href="https://www.google.com.hk/maps/place/%E6%A5%B5%E5%91%B3%E5%B1%8B+%E6%BE%80%E8%B0%B7PARCO%E5%BA%97/@35.6619425,139.6885649,15z/data=!3m2!4b1!5s0x60188ca91d999a73:0x2b0020417147c9a8!4m6!3m5!1s0x60188ddddb728f6f:0x50c3d97c2a683698!8m2!3d35.6619429!4d139.6988646!16s%2Fg%2F11h89h50k8?hl=zh-TW&amp;amp;entry=ttu">極味や 渋谷パルコ店 ハンバーグ ステーキ」&lt;/a>&lt;/td>
&lt;td>大概200RMB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10.04上野烧肉&lt;/td>
&lt;td>&lt;a href="https://www.google.com.hk/maps/place/%E4%B8%80%E9%A0%AD%E7%89%9B%E7%87%92%E8%82%89+%E6%88%BF%E5%AE%B6/@35.7088117,139.7658336,15z/data=!3m2!4b1!5s0x60188e9f7b326363:0x1057a9d3add15e59!4m6!3m5!1s0x60188e9f7ad01e89:0xd8f7a007634589e0!8m2!3d35.7088121!4d139.7761333!16s%2Fg%2F">燒肉房家ホルモン館 上野六丁目店&lt;/a>&lt;/td>
&lt;td>5300JPY -&amp;gt; 255RMB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10.05 一兰拉面*2&lt;/td>
&lt;td>&lt;a href="https://www.google.com.hk/maps/place/%E4%B8%80%E8%98%AD+%E6%B7%BA%E8%8D%89%E5%BA%97/@35.7111824,139.7873167,15z/data=!3m2!4b1!5s0x60188ec696756813:0x79483dec35c17413!4m6!3m5!1s0x60188ec6be01feef:0x9736b3e4d24be9de!8m2!3d35.7111828!4d139.7976164!16s%2Fg%2F11bwkyw6hf?hl=zh-TW&amp;amp;entry=ttu">一蘭 淺草店&lt;/a>&lt;!-- raw HTML omitted --> + &lt;a href="https://www.google.com.hk/maps/place/%E4%B8%80%E8%98%AD+%E5%8E%9F%E5%AE%BF%E5%BA%97/@35.6678689,139.6949354,15z/data=!3m2!4b1!5s0x60188ca46840eaf9:0x351cbb637aef566d!4m6!3m5!1s0x60188ca468112079:0xa93b4c85f75d9135!8m2!3d35.6678693!4d139.7052351!16s%2Fg%2F1tffzhgs?hl=zh-TW&amp;amp;entry=ttu">一蘭 原宿店&lt;/a>&lt;/td>
&lt;td>1600JPY + 1700JPY = 3300JPY -&amp;gt; 160RMB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10.06AFUR柚子味拉面&lt;/td>
&lt;td>&lt;a href="https://www.google.com.hk/maps/place/AFURI+%E5%8E%9F%E5%AE%BF/@35.6730049,139.6935022,15z/data=!3m2!4b1!5s0x60188cba52915805:0x443a6297f332fc6f!4m6!3m5!1s0x60188cba4d7bad6d:0xcb6d1919ead5d016!8m2!3d35.6730053!4d139.7038019!16s%2Fg%2F1vk6z6kj?hl=zh-TW&amp;amp;entry=ttu">AFURI 原宿&lt;/a>&lt;/td>
&lt;td>1500JPY -&amp;gt; 72RMB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10.06在711买晚餐&lt;/td>
&lt;td>面包+牛奶+便当&lt;/td>
&lt;td>大概45RMB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10.07在築地場外市場吃午饭&lt;/td>
&lt;td>海鲜丼饭+海胆蒸蛋，第一次吃还挺不错（一粒粒橙色鲑鱼卵爆开是咸口）有点小贵，毕竟筑地是经典游客&lt;/td>
&lt;td>5500JPY -&amp;gt; 265RMB&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>饮食总开销金额：1128 + 其他711买的饮料和食品大100RMB = 1228RMB&lt;/strong>&lt;/p>
&lt;h2 id="娱乐和购物">娱乐和购物&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>准备项&lt;/th>
&lt;th>实际选择&lt;/th>
&lt;th>开销&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>東京晴空塔&lt;/td>
&lt;td>&lt;a href="https://www.google.com.hk/maps/place/%E6%9D%B1%E4%BA%AC%E6%99%B4%E7%A9%BA%E5%A1%94/@35.7100627,139.8081255,17z/data=!3m2!4b1!5s0x60188ed6f9e7acb7:0x486cece4c5ab3730!4m6!3m5!1s0x60188ed0d12f9adf:0x7d1d4fb31f43f72a!8m2!3d35.7100627!4d139.8107004!16zL20vMDd0aGty?hl=zh-TW&amp;amp;entry=ttu">观景台&lt;/a>&lt;/td>
&lt;td>150RMB（在Klook软件上买的票）&lt;!-- raw HTML omitted -->ps：在网络买了票，需要在线下机器扫描二维码兑换；只要买了当天的票任何时间段来都可以，不是你买了15:00你必须到&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>六本木瞭望塔&lt;/td>
&lt;td>&lt;a href="https://www.google.com.hk/maps/place/%E6%97%A5%E6%9C%AC%E3%80%92106-0032+%E6%9D%B1%E4%BA%AC%E9%83%BD%E6%B8%AF%E5%8D%80%E5%85%AD%E6%9C%AC%E6%9C%A8/@35.6628927,139.7233511,15z/data=!3m1!4b1!4m6!3m5!1s0x60188b9d3c1c9187:0x48f9c248e9169cfe!8m2!3d35.6618586!4d139.7345469!16zL20vMDZsYjc?hl=zh-TW&amp;amp;entry=ttu">六本木城市景观&lt;/a>&lt;/td>
&lt;td>88RRMB（在Klook软件上买的票）同上&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>脱衣舞表演&lt;/td>
&lt;td>&lt;a href="http://asakusa-rockza.com/access/?lang=cn">浅草ロック座&lt;/a>&lt;/td>
&lt;td>4000JPY -&amp;gt; 194RMB&lt;!-- raw HTML omitted -->ps：女生4000JPY，30岁男生以下4000JPY，其他6000JPY&lt;!-- raw HTML omitted -->；只能现场排队和only cash；必须带上护照需要查看年龄&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>秋叶原药妆店&lt;/td>
&lt;td>发泥和洗面奶等&lt;/td>
&lt;td>5392JPY -&amp;gt; 268RMB&lt;!-- raw HTML omitted -->ps：超过5500JPY凭护照免税&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>银座UNIQ、原宿衣服和裤子、鞋子&lt;/td>
&lt;td>一件UNIQ的TShirt；NAUTICA卫衣+两个长裤；GU卫衣+外套；一双newbalance&amp;hellip;&lt;/td>
&lt;td>291(GU)+1826(ABC)+1045(shoes)+110(UNIQ)=3272RMB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>配眼鏡 JINS&lt;/td>
&lt;td>&lt;a href="https://www.google.com.hk/maps/place/JINS/@35.661555,139.6950839,17z/data=!3m2!4b1!5s0x60188ca91304f205:0xd00f031742564403!4m6!3m5!1s0x60188ca91368ded3:0x9e2c5d9dca932835!8m2!3d35.661555!4d139.6976588!16s%2Fg%2F11dzwbpznp?hl=zh-TW&amp;amp;entry=ttu">眼镜JINS&lt;/a>&lt;!-- raw HTML omitted -->选好眼镜框，普通耐损镜片不花钱只需要付镜框的钱；想配置在太阳光下偏色镜片加大概2wJPY，但这分店人比较多时间赶不上就算了；回来发现镜腿made in china&amp;hellip;&lt;!-- raw HTML omitted -->整体蛮快的，选好镜框和可以直接给现在镜片参数，大概1hour（也可以选择重新验光free）一楼选镜框二楼验光+镜片镜框加工&lt;/td>
&lt;td>12636JPY -&amp;gt; 622RMB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>买书&lt;/td>
&lt;td>灌篮高手第24卷大结局对战山王&lt;/td>
&lt;td>50RMB&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>娱乐和购物的总开销：4644RMB&lt;/strong>&lt;/p>
&lt;h2 id="日本之旅总开销13375rmb">日本之旅总开销：13375RMB&lt;/h2>
&lt;p>刚回来大概算以为大概小一万，没想到超出1w多，如果不购物，只是吃喝逛逛一万内肯定没问题，加上是国庆前定了酒店和机票，如果在提前些也能节省一部分经费，还是得早做计划！&lt;/p></description></item><item><title>2022年终总结</title><link>https://hi-ernest.github.io/blog/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 01 Jan 2023 00:55:37 +0800</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid><description>&lt;h3 id="总结">总结&lt;/h3>
&lt;p>伴随发薪来而来的是2022年最后一个工作日，也离2022年结束只剩下一天了，如果用一句话总结今年「&lt;em>痛苦和茫然，思考和探索，自信在提升&lt;/em>」
猛地一抬头望向已经走过的路，心里百感交集。回想最大的提升应该自信心的提升，因为对工作流程越加熟络，并且被时间无情推向社会人和职场老司机路上一去不复返。心境和最近看「圆桌派」那一期话题「兴致勃勃的去失败」不谋而合，慢慢的不再畏惧失败，又或者说从开始做事就总想最坏结果，到现在认定后那就积极投入而不是多想未知结果，遇到失败不在情绪上宣泄，而是反思琢磨其中是怎样导致的，思考并想法设法的解决它，发现不论从前是再怎么担心害怕懦弱的人，但在一次次发现问题，解决问题的训练中，自信心会慢慢壮大就像春雨滋润过的春笋般生机勃勃节节高。在所有的美好道德中，最难获取的就是勇气，同时它又是带给人力量也是最大的，人活于世会遭遇太多太多痛苦的事情，但勇气能一次次把我们从痛苦泥潭中拉出，让我们拍了拍身上泥土继续人生的征途。那怎么才得到勇气呢？我目前答案是提升自信，有了信心就有抵抗畏惧未知恐惧的一面强有力的盾牌，当我们把身边小事一件件完成，设置的小目标一个个的达成，遇到了问题我们没有选择逃避，而是直面哪怕是撞的头破血流，最终解决了收获精神上的酣畅淋漓，在与他人分享和讨论中不断总结那种感觉真的很爽。我现在越来越相信我把一个个遇到的问题解决了那我的能力天花板会也随之高一点点。尽管大部分在CRUD和与人沟通消耗着，但这种琐碎无趣的东西总会出现，总需要解决，认真的对待去思考怎么能提效，不停的探索，尽管看似在解决琐碎的事情，实际上在为后续「天将降大任于斯人也」作准备。让我想到「时间之书」余世存先生说的“你做三四月的事，在八九月自有答案”，应该也不外乎是这道理吧。
今年以来也见证了历史，安倍晋三遇刺、俄乌战争、能源危机、经济低迷、世界范围科技业的大裁员、乌鲁木齐火灾、白纸革命、上海北京群众抗议、疫情三年强制管控到放开，中国数亿人感染新冠&amp;hellip; 自己也经历感染新冠，从高烧头，到鼻塞，咳嗽有痰，经历了四天休息，后续有痰和间断性咳嗽症状还是持续一周多，说话还是带着浓鼻音。站在现在时间点回头望，疫情的开始就伴随大学毕业直到现在，自己就像个旁观者一幕幕像快速翻页连环画似从眼前划过。一时无法用一句话来表达其感受。时间巨轮滚滚向前将社会、生活的真相，开膛破肚，血淋淋摆在面前。突然意识很多东西不是自己所决定的，亦是无法掌握，与其痛苦烦躁，不如收拾心情把时间放在自己身上，明确自己想要具备的能力，制定目标，执行目标。但最近这段时间自己觉得干啥都特没劲、无聊，突然想要回到海南，回来熟悉地方休息缓缓。转念今年是没法回海南，内心情绪更加低落，烦躁情绪涌上心头。为了调整找回自己，决定假期出去看看其他城市，没准外界的刺激能审视内心寻找到真正想要的东西！于是2022年的最后一天和朋友去大同看看，探索和感受城市氛围。四线城市的“刺激”，城市的建设，服务设施的配套，人文气息等等…这些体验驱动着我内心，也审视自己，要我坚定还是得在一二线城市打拼奋斗，又或者回到家乡三线城市，坚定后低迷情绪会逐渐走兴奋，决定了那就去做就好了！回到北京，内心多了一份坚定。&lt;/p>
&lt;hr>
&lt;h3 id="2022年大事件记录">2022年大事件记录&lt;/h3>
&lt;ul>
&lt;li>&lt;em>1月回到海南过年 见了家人和朋友&lt;/em>&lt;/li>
&lt;li>&lt;em>3月第一次吃了驴肉火锅；合租老哥秘接连夜被拉去隔离，我和其他合租同学居家隔离十天…&lt;/em>&lt;/li>
&lt;li>&lt;em>4月搬了工区；开始学习蛙泳，憋气、吐气、蹬腿…偶尔去一次，冬天后再也没持续进度滞后，2023还得持续学习下去&lt;/em>&lt;/li>
&lt;li>&lt;em>5月居家工作，开始夜跑；第一次玩滑板、去了北京植物园第一次玩飞盘、和新朋友们自驾去了北京野生动物园&lt;/em>&lt;/li>
&lt;li>&lt;em>6月人生第一次徒步野长城「鹿皮关」认识很多有趣的朋友，第二次徒步「清水河」、周末开启奥森篮球…&lt;/em>&lt;/li>
&lt;li>&lt;em>7月第二次献血、和老苗老曹北京会面「潮汕火锅」&lt;/em>&lt;/li>
&lt;li>&lt;em>8月从朝阳骑回海淀别人转手山地车，彻底告别共享单车&lt;/em>&lt;/li>
&lt;li>&lt;em>9月中秋假期第一次尝试射箭，有趣好玩&lt;/em>&lt;/li>
&lt;li>&lt;em>10月去了老苗新家吃了烤肉、第一次去了国家图书馆、第二次、第三次…&lt;/em>&lt;/li>
&lt;li>&lt;em>11月经历转租、找房子、搬到新住处（从与四个舍友合租到独自居住独享”大house”，多了些舒适但少了些交流）&lt;/em>&lt;/li>
&lt;li>&lt;em>12月奥森篮球停摆；感染新冠到杨过到杨康，公司北京同事杭州上海等陆续🐑；逛了玉渊潭公园、景山公园、朝阳公园；2022年最后一天和朋友们在大同跨年&lt;/em>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="2022年目标">2022年目标&lt;/h3>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 快乐工作&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 捡起跑步和锻炼&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 去更多的地方看别样的风景&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 存款小目标&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 学习滑板&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 学习游泳 &lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 健康生活&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 一天八杯水&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 坚持写博客和所思所想&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 算法题量到xxx&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 参与开源&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="2023目标">2023目标&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 活到2024&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 一天八杯水 手机设置提醒上午11:30、下午三点半、晚上20:00分别辅助&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 坚持跑步和锻炼 一周跑步至少10km&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 继续学习游泳，能不借助外力自由游泳&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 去更多的地方看别样的风景&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 回顾本周所思所想记录，每周末24点之前push周记&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 书籍阅读30本 具体待定补充 并写下心得&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 电影10部 具体待定补充&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 继续算法和数据结构 每日一题打卡&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 学习英文 每天10个单词&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="朋友们2023年平安喜乐希望我们既身体健康还有诗和远方">朋友们！2023年平安喜乐，希望我们既身体健康，还有诗和远方！&lt;/h1></description></item><item><title>自我反思</title><link>https://hi-ernest.github.io/blog/20220904-%E8%87%AA%E6%88%91%E5%8F%8D%E6%80%9D/</link><pubDate>Sun, 04 Sep 2022 23:51:02 +0000</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/20220904-%E8%87%AA%E6%88%91%E5%8F%8D%E6%80%9D/</guid><description>&lt;p>我已经陷入痛苦和烦恼的情绪当中，人际关系相处的事情很迷茫，发现我好像不太好处理人与人之间交际，有时候出发立意是好的真心的，但做出的结果会可能让别人也不爽，自己做出了事情，过后又会思考刚刚是不是自己没做好是不是应该那样做好些，会不断后悔自己做出的行为，生成讨厌自己情绪，也会出现叛逆心理“对呀 我就是这样，我就这样做不管你们”又或者退出群逃离接触所有的关系，抛开之前种种…会想要所有人从身边推开强烈情绪中，但又有一种声音告诉我别做出极端的事情要冷静慢慢思考到底该怎么解决，这是我发现了自己身上性格问题！直接原因是：太容易把真心话说出来又或者说议论别人？我自己觉得没什么的事情，别人就不爽了，遇到问题第一件事情总是想着逃离和躲闪，又或者找别人让我不爽的点，但我那时刻不会直接说但后续心中会反复想到，陷入糟糕的情绪漩涡中，很烦很不爽
昨天躺在床上睡觉前顿悟了自己为什么对于不再接触的人，会选择删除斩断联系来源，前段时间在舍友口中以为找到了答案，是不是我自己太小气了，身为男生要大气点，如果不联系了那就留着也行呀。我真正的原因是我容易抱着幻想且容易好了伤疤忘了疼，如果自己不把自己逼到绝对没挽回的程度，那我还是会一如既往反复陷进去踩坑做一些无意义的事情，这个方法是删除了变相的从我的生命中移除，消失在我的眼前，我就不会去想和做出傻逼的事情，例子就是我想专心看书，但手机就在眼前，忍不住拿起手机刷，于是我把手机直接丢在另一个房间，眼不见心不烦，只有书才能让我进入状态。&lt;/p>
&lt;p>我这种解决问题的方式和心理是正常的吗？又或者是啥更好的方式呢？&lt;/p>
&lt;p>发现自己性格是有存在该问题或者缺陷的，在解决之前降低或者屏蔽社交吧，留更多时间和空间给到自己，阅读和思考&lt;/p>
&lt;p>对待人际关系也是，同事就是同事，就事论事就可，学会拒绝不是自己该做的事情，社会的丛林法则受迫害的只会是老实人，圆滑而不世故，保留真心真诚给家人和最亲近的朋友，而不是陌生人和同事。&lt;/p></description></item><item><title>工作两年了</title><link>https://hi-ernest.github.io/blog/%E5%B7%A5%E4%BD%9C%E4%B8%A4%E5%B9%B4%E4%BA%86/</link><pubDate>Tue, 19 Jul 2022 23:19:24 +0800</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/%E5%B7%A5%E4%BD%9C%E4%B8%A4%E5%B9%B4%E4%BA%86/</guid><description>&lt;p>时光飞逝从2020-07-13到了2022-07-13，早已想写下此文来回顾和总结过去以及对今后岁月的展望，这几天在清晨骑车上班路上、或做核酸的路上…不断思考这两年给我改变是什么…但忙的需求开发与联调于是搁置到今天0716周六的午后来启文。&lt;/p>
&lt;blockquote>
&lt;p>自身的变化关键词归纳，从容、有序、勇敢。&lt;/p>
&lt;/blockquote>
&lt;p>从校园象牙塔初入钢筋水泥社会丛林，懵懂无知，他人的话总会覆盖自己内心声音占据上风，一点点风吹草动总会在内心惊起波澜，紧张胆小蜷缩畏惧质疑迷茫…白天忙忙碌碌，夜深人静总会质疑自己做的意义所在，未来的出路在哪儿。新的城市带来的新鲜感在褪去，望不见业务发展前景的工作默默地磨砺了锐气，痛苦的情绪像流水不间断，不知不觉充溢躯干直上颅顶。幸运的是找到宣泄方式，快乐的源泉，充电的补给站，那就是跑步，让汗水肆意冲刷身体，让糟糕的情绪在奔跑中消失在风里。在那些那时候痛苦不已的日子，给我继续积极前行的动力。思绪跳脱回现在，虽然不确定自己以后会从事什么行业，但却能十分肯定以及确定跑步是我一生最爱之一，释放压力分泌多巴胺，她令我放空冷静反思让我大口呼吸贪婪的消耗氧气，让我感到开心和快乐。回想当初高中旅行离开时“我不会来北京工作”成了戏谑，毕业九个月后还是来了帝都。刚来的那段时光不熟悉不适应等原因，让我鸭梨山大，在质疑和痛苦中一度想要放弃，甚至怀疑自己是否还要从事这个行业，早上醒来还没睁眼一想要上班是痛苦的，冬日迟到被说，做任何事情不被认可的感受…但最终挺过来，熬过来，感谢我的学长东坡和我的母亲，他们的言语给我了莫大鼓励，更要感谢那时的自己，一次又一次跟自己对话，肯定自己，相信自己，不断告诉自己，我只是没经验我不能唉声叹气，我需要的是更加积极，打开自己不断沟通，每个人又不是什么都懂的，发现哪些不行那就要不断尝试，不断总结，失败了又如何、丢脸了又如何，我收获我想要的就足够。这样的想法在不断反复中深烙印心里，在实践中就会冒出一个声音“再试一下坚持相信自己”，是这个声音带我走出错综复杂阴暗的巷子，看到胜利的曙光。回顾来看，遇到未来的事物，不要总想逃避，而是要解决问题，只有不断解决问题才能够积累和成长。可以请教有经验的人，又或者自己先分析问题，制定方案，然后实践，不断试错不断总结，就会无限逼近答案，终会得到答案。 明确发力的方向，剩下就是练习练习练习、坚持坚持坚持、总结内化成自己的知识和经验。现在团队开发流程亦或者工作上做事流程十分熟悉，随即带来是掌握感的，遇到问题不再畏惧和恐慌，分析遇到的问题，知道如何解决该问题，我应该从哪些方面来寻求帮助，思路清晰明确了身心就会相对应的从容不迫。工作上慢慢积累好的工作习惯，找到适合自己高效工作流，小到桌面大到多任务并行处理如何设置优先级，做到事事有回应，件件有着落，工作慢慢迎来的是有序有条理，因为相信提效才能早下班，如何再进一步提升解决问题效率是我现在课题之一。随着时间，打破了所谓开发工程师只需开发不需要沟通的偏见，只要有人的地方的就需要的沟通，软件工程是团队合作的产物，协作就需要沟通，很多说不善于沟通表达都是借口，要想往上走起就必须沟通，慢慢摸清明确边界，及时的反馈，让他人听到你的声音，要有独立思考判断的能力，而不是别人说什么就是什么，不要停止思考（人就是一根会思考的芦苇）更要勇敢的表达，只有表达才有可能得到所需要的回响。不要妄想不做出任何表达，别人就会主动知道你去了解你。工作上遇到任何不合理的地方，会思考过后，去勇敢的表达，去发声就算结果不尽我意，但我尝试了就不会后悔。慢慢才发现在众多的美好品德中，勇敢是最可贵也是最难的，需要克服自己怯弱，不怕得罪别人，无视他人不理解的目光，坚定不移的说自己想说的，做自己想做的事情。不恰当比如就好像“我爱你，与你无关”，我做我想要做的事情，而你最终选择或者其他结果，无我无关。这两年时光，发现适当的痛苦让我能更清晰的认清现状，过的每一天赋予多了些意义，经历也因为痛苦色彩在记忆中更加深刻。很多时候我们已经处于健康安全环境下，但依然痛苦不自知为何。极有可能陷入总要既要又要还要陷阱，社会有太多声音如消费主义陷阱，让我们以为买了这个等价于快乐甚至幸福，但往往它们只会成为多余东西，并只会让我们分散精力感到痛苦。一个好的方法，那就把注意力放在自己已有的地方上，感恩自己拥有健康健全的身体，有良师益友，家人…这些才是最重要的财富，把注意力放在自己身上，倾听内心深处的声音，勇敢去追求自己真正想要的东西。感恩珍惜当下，探索这个世界，寻找世界的美好和快乐。“我们每个人其实说白就是为自己简历打工“，我们本身就是产品，打磨产品提升产品品牌力，让用户信赖让用户买单，那就打磨产品一样打磨自己吧！两年岁月虽有所收获，但自己还是菜得要命，高情商表述就是还有很大的提升空间，2022虽已过半，但还要喊出：2022做更好的自己，披荆斩棘、野蛮成长！&lt;/p>
&lt;h1 id="慢慢打开自己主动交流参加了各种活动">慢慢打开自己，主动交流参加了各种活动&lt;/h1>
&lt;p>学会了飞盘去徒步两次，也认识不少新朋友，新妹子。但发现感情的事情，自己真是个白痴，很多事情到了一步不知道该如何往下走，但也算是走出舒适区，认识了新朋友，圈子稍微扩大点。虽然没有好的结果，但也算24年和女生约会过了，一起看了电影吃三顿饭，从紧张心脏跳到不行，害怕说错话等等，慢慢表达好多很也算是成长。前几天还在想自己很容易喜欢也很容易下头，这种行为是什么样的心理和动机，慢慢分应该是实践少看影视多了，不可能有特别好的人，如果有喜欢的就去追，很多时候不表达就会错过，虽然表达也会被拒绝，但被拒绝总比错。如果一点都不喜欢，没有吸引力那人就完了呀，说明对女生不感兴趣了呀
慢慢来吧，自己还需要提升，把工作、生活都能养成好的习惯，健康有趣高效。加油！相信自己 我是最棒的！&lt;/p>
&lt;h1 id="之后的一年工作目标">之后的一年，工作目标&lt;/h1>
&lt;p>往下一个阶段工程师要求无限逼近，最终达成成就
继续学习英语、数据结构和算法、系统设计
继续学会游泳、坚持跑步、听播客
新的目前：日/周更博客、看书、写作
全新后续：播客（边积累边做）&lt;/p></description></item><item><title>为了什么而工作？</title><link>https://hi-ernest.github.io/blog/what-to-work-for/</link><pubDate>Mon, 18 Apr 2022 01:41:45 +0800</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/what-to-work-for/</guid><description>&lt;p>每一代人有每一代人的焦虑和迷茫，痛苦和不知所措。这是我们身而为人，在时间裹挟下，成长路途不可避免遭遇的事情，最关键是不要用娱乐和忙碌去逃避存在的问题，而是静下心来，闭上眼深呼吸，问自己，自己想要的到底是什么，每条路不同选择背后的利与弊，自己更愿意选择哪一条路，静静地慢慢地倾听内心深处的回应的声音。&lt;/p>
&lt;p>昨天和宋老师dating聊到了，之后发展的路是留在北京还是去向哪一座城市，身边选择毕业回到家乡的朋友现状是怎样的，我们现在是怎样的，怎么可以破当下局（不被市场大环境裁员危机、绩效等等因素影响），怎么才能有额外的收入/副业，之后的职业发展何去何从。那个当下我阐述过于浅显单薄，回到住处，夜深人静，独自一人不由一连串自己向自己发问，自己来北京到底是为了什么，什么对自己是最重要的，自己想要收获什么…随着时间在不断前行，我往往会忘掉初心，忘记那个当初出发干的那碗烈酒的味道，那种感觉自己就是宇宙的中心，就如同莎士比亚说的那般“即便我身处果壳之中,仍自以为是无限宇宙之王”，那种我可以打破一切桎梏无所畏惧的勇气和态度，浑身充满朝气和动力。但好像人越成长就慢慢被生活被工作无形中磨平的锐气，消退了当初无所畏惧的勇气，以前总觉得自己无所不能，但进入社会来到现实游戏，就像冬日深夜里倾盆大雨哗啦从头淋到脚，异常冰冷残酷，真实和无能为力。慢慢地，我了解到世间的事情百分之八十的结果都不是自己可以决定的，我们只能做好自己的能做好的部分，并预见做好最坏结果，接受所有的可能性。慢慢地，也清晰的认识到自己就是一个普通人，没办法改变世界改变社会，在社会和历史的滚滚长河中，自己是那么的微不足道，每一天都会面临着各种各样的选择，都在思考选择哪一个和执行当中度过每一天，日复一日年复一年，自己好像做了什么又好像没做什么。
&lt;strong>那我on-site为什么来北京？我来字节想要得到什么?&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>团队初期上海基本没人，杭州城市调性不喜欢，内推人是北京团队的&lt;/li>
&lt;li>北京是互联网最繁荣机会越多的地方，趁自己年轻体验北方的城市，了解北方的文化，吃的喝的玩的有趣的事情和人，希望能认识结交优秀有趣的人，向优秀的人学习，不断提升高自己，开阔眼界，没准认识可以一起创业的合作伙伴&lt;/li>
&lt;li>认识和了解大公司的工作和管理流程和规范，节奏和做事的方法论，怎么去分析问题，解决问题，去体验大公司的文化建设，技术建设等等，增长这方面的见识，积累这方面的经验&lt;/li>
&lt;li>趁年轻多去几个城市，体验不同的生活和工作氛围；去探索不同的领域，尝试不同的方向，希望能找到适合自己，自己感兴趣的方向，深耕方向，让自己变得成熟和强大，往后有更多的选择的权利&lt;/li>
&lt;li>人生之所以有意义是因为人生是有限的。我希望在我有限的时间内，能去体验各个不一样的生活，能认识各行各业的人和他们交流，了解我之前不知道的东西，能丰富自己人生体验、人生阅历，让自己闭眼前回想自己没有白活一场，纵使最后头破血流也不枉此生，“大闹一场，悄然离去”。我希望了解这个世界、这个社会的游戏规则，去学习和掌握游戏规则，只有掌握规则才能有机会改变规则，让这个世界，这个社会变得更好一点点。因为我的存在有变得更好一丢丢，我就觉得我这人生也值得了。&lt;/li>
&lt;/ol>
&lt;p>不要忘记自己想要的是什么，只有这样在前行的路上才不会迷茫，更不会因为绩效或者别人的一席话就轻易否定自己，让自己陷入痛苦和不安的情绪中，做的如何自己是最清楚的，做的一切最要紧的不是别人的认可，而是自己对自己的认可。&lt;/p>
&lt;p>之前看过一段话，一个普通人，普普通通的一生默默无闻，但他这一生没有伤害别人也没有危害社会，那他是不是没有对这个社会没有贡献呢？不，他没有伤害别人也没有危害社会，他做了一个好人，让社会少了一份恶多了一份善，因为他这个社会变得更好了一点点。&lt;/p>
&lt;p>那些毕业回老家，考公务员或者其他行业等等，不管留在大城市还是回老家、还是去二三线城市，每个人选择的工作都不简单想要做好也是难的，每个工作都有它的价值，每个选择都有利与弊，人身处不同的阶段也会有不同的选择，选择是动态的，是摇摆，譬如刚毕业前几年不想回老家，十年后更看重家庭后续回到老家又是新的开始。关键是认清自己现在到底想要的是什么，不留余力的找到适合自己的长坡和最湿的雪，然后坚定的从山顶滚下来。&lt;/p>
&lt;p>分享龙应台的《亲爱的安德烈》这段话
“我要求你用功读书，不是因为我要你跟别人比成就，而是因为，我希望你将来会拥有选择的权利，选择有意义、有时间的工作，而不是被迫谋生。”
平庸是跟别人比，心灵的安适和自己比。千山万水走到最后，我们最终的负责对象，还是“自己”二字!&lt;/p></description></item><item><title>2022/03/09北京疫情</title><link>https://hi-ernest.github.io/blog/2022-03-09/</link><pubDate>Wed, 09 Mar 2022 21:16:35 +0000</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/2022-03-09/</guid><description>&lt;p>近几天北京又爆发了新冠疫情病例，涉疫小区一个个排队核酸，人之间又开始重视和带好口罩。距离住处最近的工区-中航，发生了病例，并且那人离我舍友工位说是只有三四米，妥妥的密接人员了。周日不舒服去检测发现，七号周一那人没来工作，中航工区开始全面封锁，舍友中午回住处睡觉，所以下午封闭和集中隔离时，没把他带上，他自己在住处休息。我和室友一对情侣就不幸沦为了次密接，下午社区通知，会有专车拉去集中隔离，但直到现在晚上九点半还没有丝毫动静，这种要去又不知道什么时候去的感觉，实在是太难受了。加上中午休息时间太短，下午告知后收拾心情收拾东西，希望早日去对应隔离酒店，安心将事情件件解决，结果到现在还没有通知，也不知道车子什么时候来。不知道后续怎样，大house？捅鼻子？都是未知，又或者继续在住处隔离，人不能掌控的都顺其自然，能掌控的就好好抓在手心，好好把握，创造价值。&lt;/p>
&lt;hr>
&lt;p>删除了手机常刷的应用，微博和脉脉，将所有应用进行整理归档。差不多快两周，最大的感觉就是时间变多，但自己并没有将时间充实的用到看书和弥补短板上，所以变得空虚、无目标感，小小痛苦。我需要坚持刷题、看文章/书籍、写作（输入、内化、输出）把时间用到有价值和有意义的事情上。&lt;/p>
&lt;p>学习！&lt;/p>
&lt;p>学习！！&lt;/p>
&lt;p>学习！！！&lt;/p>
&lt;hr>
&lt;h4 id="心态">心态&lt;/h4>
&lt;p>那些我们无法控制的事情，做好迎接最坏结果的准备，放平心态，兵来将挡水来土掩。把关注和精力放在当下能控制的事情，专注当下所需要做的事情，在每个平凡日子日拱一卒，结果是不会差的。&lt;/p></description></item><item><title>2021年终总结</title><link>https://hi-ernest.github.io/blog/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 31 Jan 2022 17:55:58 +0000</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid><description>&lt;blockquote>
&lt;p>2021.11.31在朋友圈年终总结过于粗略，于是想重新梳理和总结，给予2022制定新的目标，带着目标清晰的活在当下，希望今年年底回顾头来看是符合预期不错的结果。&lt;/p>
&lt;/blockquote>
&lt;h2 id="自我认知和思考方式改变">自我认知和思考方式改变&lt;/h2>
&lt;p>2021的1月到4月，三个月充斥是不断复习、刷题、投简历和面试，有失败也有收获，有痛苦有迷茫，有悲观有不自信，但从来想过放弃，心里有股冲劲，渴望证明我可以，但在往前走的路上，真实情况是时不时迎头就是一大瓢冷水，消磨你的激情、消磨你的意志，心里的小恶鬼的声音也偷偷冒出来添油加醋“你是不行的”，回声想要洞穿你的头颅。每天下午五六点去公园跑一圈，在运动中脑海中的噪音消失，内心前所未有的安静，“现在就结束了吗 要不要再试一次”“我可以的！再试一次”每天的跑步就像定时充电，把鸡血打满，重新上阵。&lt;/p>
&lt;p>面试轮次不断的通过，信心也不断增加，但也遇了新的问题。收获了几个offer，但并不是自己满意的，也被一些操作恶心到，但面试面的公司已经差不多了，某app该投都投了，现在职业空档期也有段日子了，那到底选择接受还是继续投继续冲。想了很久，这样下去也不是办法，还是选择一家约好入职时间，但内心没有欢喜还夹杂难受滋味。在前面苦战后，清明过后迎来了面试爆发期，小米、字节被捞，一面二面三面…顺利拿下
然后收拾准备前往北京，开启北漂。&lt;/p>
&lt;h3 id="遇事不要躲是你的就正面直刚想办法解决积极主动不要害怕拒绝和坏结果">【遇事不要躲，是你的就正面直刚“想办法”解决，积极主动不要害怕拒绝和坏结果】&lt;/h3>
&lt;p>有了这次经历，我深切明白了什么叫很多事情不是个人可以控制的，如果它到来那就想方法，制定计划去解决它，逃避和拖延，陷入过去去纠结，都是没有意义的。时间才是人类最好的朋友，他无时无刻催促着你做好当下才是有意义和有价值的。自己在脉脉上主动加好几届学长们，从陌生到关心和帮助，如果不主动后续也不会收到一些建议和面试机会等，要让脸皮厚起来不计得失的去做去尝试，要感恩身边的帮助过的朋友们。&lt;/p>
&lt;h3 id="消化负面的情绪不畏选择敢于选择聆听内心的声音坚定的肯定相信自己">【消化负面的情绪，不畏选择敢于选择，聆听内心的声音，坚定的肯定、相信自己！】&lt;/h3>
&lt;p>不以物喜不以己悲，其实是个人遇到事情有情绪是再正常不过的，肯定产生情绪的合理性，找到适合自己消化负面情绪的方式。迷茫痛苦时候，选择那个积极的声音；面临多个选择时候，让自己静下心，聆听自己内心到底想要什么，然后做出内心的决定。因为只要选择了就意味着放弃其他的可能性，所以不存在不后悔的选择。做出了选择那就坚定不移的肯定自己，相信自己，自己都不肯定自己，事情怎么能成，别人怎么信任你。&lt;/p>
&lt;h3 id="问题的拆解拆分小问题一个个解决从而大问题解决">【问题的拆解，拆分小问题一个个解决，从而大问题解决】&lt;/h3>
&lt;p>不要妄想极短时间内达成目庞大的工作量，心里难免打起了退堂鼓，变得烦躁变得拖延，发现了一个好的方法，那就是用思维导图进行对知识点的拆解，梳理和描绘骨架，父节点下子节点以问题形式一二三列举，问题下面在填充涉及的知识点，也方便后续以问题方式回顾，就好比一句话反问句总比陈述句更令人印象深刻，反问句带出的是思考而不是直接直白的答案。&lt;/p>
&lt;blockquote>
&lt;p>你这样处理是可以/不可以的。你确定可以这样处理？你确定？为什么？&lt;/p>
&lt;/blockquote>
&lt;p>拆分拆细后，最重要就是坚持和付出，日拱一卒，再多的内容，每天啃一点，感觉好像也没提升多少，但孜孜不倦内容会慢慢就成了养分，量变才能质变。&lt;/p>
&lt;hr>
&lt;h2 id="工作在字节">工作在字节&lt;/h2>
&lt;h3 id="适应远程协作交流工作精神上松弛许多流程都基本掌握相对得心应手">【适应远程协作交流工作，精神上松弛许多，流程都基本掌握相对得心应手】&lt;/h3>
&lt;p>从面对面办公到远程多地办公协作的适应，通过飞书讨论沟通总是说不清楚，过于消耗时间和精力，到观察身边同事怎么沟通，会议前抱着问题讨论，事后有结论并周知。完整跑了几遍需求评审、开发、上线完整流程，使用内部工具来进行排查问题等，刚来就直接交接工作和理解需求，开始上手，自己时刻绷着一根弦一样，还记得leader喊我一声，从椅子上蹦起来…整个状态不够松弛，不够自信也是其中原因之一。&lt;/p>
&lt;p>学习和适应新开发语言，并发控制和反射学习，遇到rmq问题上，深入学习，以文档方式记录下来；学习和使用ES来完成需求迭代。&lt;/p>
&lt;h3 id="熟悉和思考业务独立的思考用数据说话而不是盲目接需求和开发">【熟悉和思考业务，独立的思考，用数据说话，而不是盲目接需求和开发】&lt;/h3>
&lt;p>公司上各司其职，虽然是开发但对于业务需求，要敢于质疑需求的合理性，能不能解决问题，有没有更好的方法去解决，而不是盲目听从别人输出的观点。做出的产品后续维护和支持同样重要，需要思考通过什么数据指标来衡量真实使用率情况，处理单量提升、渗透率提升多少等，多思考才能少做无用功。
观念上转变，工程师是制造和使用工具的人，用自动化工具解决重复性问题&lt;/p>
&lt;h2 id="日常生活">日常生活&lt;/h2>
&lt;h3 id="跑步">跑步&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;h3 id="租房">租房&lt;/h3>
&lt;p>搬来帝都租房，找的房东直租，房东和舍友们还算比较Nice！（推荐：暖房）
租房行径：成都大源1400 -&amp;gt; 上海静安2700 -&amp;gt; 北京海淀3700（真的难顶…）
&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="播客">播客&lt;/h3>
&lt;p>开始接触和喜欢播客，针对现在遍地小视频，只有声音让人更能关注其内容本身。
听的几个节目，自己也尝试播一期节目&lt;/p>
&lt;ul>
&lt;li>安主管(AndreGuan)，微博上是个滑板频道的博主，播客更多是日常和书籍和实事的思考回答&lt;/li>
&lt;li>鼓腹而游，介入掉书袋和扯闲篇之间的播客&lt;/li>
&lt;li>老talk消息，很杂有趣&lt;/li>
&lt;li>牛油果烤面包，硅谷从业人员谈科技趋势，会邀请业务有影响/深耕的人作为嘉宾，共同讨论话题，谈话很舒服，观点会让人眼前一亮。&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;h3 id="电影">电影&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;h3 id="书籍">书籍&lt;/h3>
&lt;!-- raw HTML omitted -->
&lt;h3 id="博客和刷题">博客和刷题&lt;/h3>
&lt;p>重新搭建博客，重新拾起记录的快乐，让记录的琐碎和片段有了窝藏的地方。希望不要停，继续热爱生活，记录生活，不断学习不断思考，不停记录。
&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="旅途">旅途&lt;/h3>
&lt;p>国庆天津两日游，感受当地人早餐和生活氛围
逛了逛故宫、颐和园、南锣鼓巷、鲁迅博物馆
感受下雪 踩雪 画雪&lt;/p>
&lt;h2 id="2022的目标和期许">2022的目标和期许&lt;/h2>
&lt;p>健康生活，快乐工作！&lt;/p>
&lt;h3 id="身心健康">身心健康&lt;/h3>
&lt;p>身体健康为第一位，一天八杯水，晚上两点前休息，一周两次锻炼
周末尽量不点外卖，煮饭吃
学会游泳🏊&lt;/p>
&lt;h3 id="记录生活和学习">记录生活和学习&lt;/h3>
&lt;p>不断思考不断尝试，不断总结，以文字形式记录下来
继续熟悉物流业务，继续刷题，学习数据结构和算法&lt;/p>
&lt;h3 id="继续阅读">继续阅读&lt;/h3>
&lt;blockquote>
&lt;p>一本书就像一把利斧，要劈开我们冰封的内心&lt;/p>
&lt;/blockquote></description></item><item><title>天津之旅</title><link>https://hi-ernest.github.io/blog/%E5%A4%A9%E6%B4%A5%E4%B9%8B%E6%97%85/</link><pubDate>Sat, 01 Jan 2022 18:17:08 +0800</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/%E5%A4%A9%E6%B4%A5%E4%B9%8B%E6%97%85/</guid><description>&lt;h3 id="前序">前序&lt;/h3>
&lt;p>现在14:12分，我在前往天津的路上，未知的旅程。&lt;/p>
&lt;p>想要什么就去做，人生苦短没有什么什么东西是永恒的，尽可能在有限的生命当中，获取尽可能多的生活经验、人生经历。我很喜欢在路上的感觉，心会变得很平静温和，坐在临窗的位置，祖国的大好河山一幕幕在眼前划过，远处是玩具车大小的车辆，近处绿油油的树木。有时候一个人啥的不想干， 但心里总有个声音和信念让你去做，也许是不让自己后悔的声音。记忆会随着时间越加模糊，而视频、照片和文字却是永远保持清晰，看的一瞬间带回曾经的那段时光。&lt;/p>
&lt;hr>
&lt;h3 id="篇章">篇章&lt;/h3>
&lt;p>&lt;strong>2021.10.03&lt;/strong>早上10:30到了天津西北角，慢慢走拐到一个小路口，一排小摊热气腾腾的早餐，煎饼果子、锅巴菜、卷圈、熟梨糕、沙茶…&lt;/p>
&lt;p>幸运最后几碗也吃到了锅巴菜，起初感觉是一丝丝胡辣汤感觉，后面感觉还行。吃了卷圈，卷圈大饼卷油炸圈子，圈子皮是脆的里面有粉丝、菜和花生酱…挺不错就是味重些。吃饱就去溜达&lt;/p></description></item><item><title>2021回顾和展望2022</title><link>https://hi-ernest.github.io/blog/2021%E5%9B%9E%E9%A1%BE%E5%92%8C%E5%B1%95%E6%9C%9B2022/</link><pubDate>Fri, 31 Dec 2021 23:07:50 +0000</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/2021%E5%9B%9E%E9%A1%BE%E5%92%8C%E5%B1%95%E6%9C%9B2022/</guid><description>&lt;p>这一年发现了自己很多不足之处，但也有所收获和提升。入职了新公司，从之前面对面办公模式到远程沟通协同方式转变，从小心翼翼、唯唯诺诺，到适应环境主动出击，发现问题和推进解决，学习沟通方式和谈判的艺术，虽然现在还不能完全独当一面但新的一年这也是我发力和提升的地方之一。认清现实，在无法改变大环境的时候，不如先改变自己，适应当下环境，让自己变得优秀，才有可能后续推进环境的改变。与其担心和焦虑，害怕与恐惧，不如主动出击，大胆提问和不断尝试，付出实践，就算犯错也能收获经验，好过于停留原地终无所获。在实践过程中，发现自己优势是点子很多，想法丰富，但是行动力不足，学习和实践的主观能动性不足，更多的是停留在思考的层面。新的一年，我将把实践中出现的想法随时记录，评估优先级后付出行动，将想法落地，不管结果如何总结和复盘，积累处理各种问题的方案和经验。还有就是自己对数据敏感度上很差，没有很强意识观念，需要多看看业务和中间件相关指标，学会用数据说话，用数据量化成果，来推演产品是否具有价值，多思考而不是盲目的低头干活。新的一年，提升业务和技术能力，提升自信心，让自己的内心变得更加强大。不管遇到什么问题，一定相信自己，寻找解决方案，付出实践，坚定不移，不管再难再痛苦再繁琐都能最终克服和解决。&lt;/p>
&lt;ol>
&lt;li>身体和精神是第一位的，少熬夜多喝水多锻炼比啥都重要的多&lt;/li>
&lt;li>不要停止思考，将想到好的点子记录下来，付出行动去执行。有效、高效的工作，形成自己的工作流，不要害怕出问题，胆大心细，针对问题思考并付出行动 去解决，而不是逃避现状。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>不要让战术上的勤奋掩盖战略上的懒惰&lt;/p>
&lt;/blockquote>
&lt;ol start="3">
&lt;li>记录阅读和发现的问题以及解决方式，形成自己经验。大胆推测，细心验证，发散思考，快速解决&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="2021回顾">2021回顾&lt;/h3>
&lt;p>✅经历了社会毒打&lt;br>
✅经历第一次社招&lt;br>
✅从上海来北京开始新工作&lt;br>
✅第一次找的房东直租 &lt;br>
✅尝试投入基金事业当中&lt;br>
✅第一次去了天津 &lt;br>
✅第一次尝试录播客&lt;br>
✅去了动物园和海洋馆&lt;br>
✅搭建了新博客，开始新记录&lt;br>
✅第一次玩了有NPC的密室逃脱&lt;br>
✅第一次线下聚会认识新朋友们&lt;/p>
&lt;hr>
&lt;h3 id="2022目标">2022目标&lt;/h3>
&lt;p>核心目标：健康生活，快乐工作&lt;/p>
&lt;p>分解目标：&lt;/p>
&lt;ul>
&lt;li>一天八杯水&lt;/li>
&lt;li>捡起跑步和锻炼&lt;/li>
&lt;li>坚持写博客和记录生活所思所感&lt;/li>
&lt;li>能给开源项目贡献一份力&lt;/li>
&lt;li>去到更多的地方看到别样的风景&lt;/li>
&lt;li>学会游泳&lt;/li>
&lt;/ul></description></item><item><title>2022倒计时DayTwo</title><link>https://hi-ernest.github.io/blog/2022%E5%80%92%E8%AE%A1%E6%97%B6/</link><pubDate>Thu, 30 Dec 2021 00:02:59 +0000</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/2022%E5%80%92%E8%AE%A1%E6%97%B6/</guid><description>&lt;p>&lt;img src="https://raw.githubusercontent.com/ruihuachen/imgbed/master/%E5%90%AF%E7%A4%BA%E5%BD%95-2.jpg" alt="">
&lt;img src="https://raw.githubusercontent.com/ruihuachen/imgbed/master/181640793933_.pic.jpg" alt="">&lt;/p></description></item><item><title>2021圣诞夜</title><link>https://hi-ernest.github.io/blog/2021%E5%9C%A3%E8%AF%9E%E5%A4%9C/</link><pubDate>Sun, 26 Dec 2021 00:59:00 +0000</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/2021%E5%9C%A3%E8%AF%9E%E5%A4%9C/</guid><description>&lt;p>虽然一不小心就过了零点，但总想记录今日的所思所感。&lt;/p>
&lt;p>从海南来北京将近八个月了，经历的干燥到甩干衣服晒到客厅，短短一天就像强力烘干机烘干的产物，习惯海南、重庆、上海湿润气候来到北方着实不适应，幸好之前在成都实习买的保湿霜经历一年还能苦苦支撑，现在则对干燥天气见怪不怪，从容不迫，来吧！经历了北京初雪❄️，零下10度，骑个单车，寒风萧萧，脸和手就如同锋利小刀肆意乱割，鼻涕眼泪横流的时候真的想回到温暖的南方，但念头是念头，在匆忙工作和生活中，时间不知不觉的流逝。&lt;/p>
&lt;p>今天和之前在圣诞筹划聚会群的小伙伴们面基了，玩了真人NPC的密室逃脱，吃了意大利菜，像老朋友一样聊天唠嗑，谈天说地，感觉大家都很优秀，每个人都有不同的经历和故事。早上地铁转公交再骑单车2.2公里多，为选地址这么远，跑到什么鬼地方七棵树还默默吐槽，不知道这次活动将遇到什么样的人，经历什么事情，感到一切未知而兴奋同时也抱有可能与预期不符可可能尴尬的惴惴不安。但现在晚上洗澡不经头脑回想，今天整个流程，很庆幸自己走出了舒适圈，勇敢报名活动，虽然很想认识新朋友，但脑海中总会念头说，太冷了不如在家窝着休息呢，会不会很尴尬会不会是不好的经历，会不会到头来就是浪费时间精力。这次的我，抵御住懒惰、抵御住不自信，迈出了第一步，其实人就是别想太多，只要不是伤天害理的事情，用想法就去做，不要一拖再拖，想好立刻就去做，不管结果如何，你总会有所收获。思绪带回来早上10点，像走迷宫一样顺了一遍今天做的事情、每个人的特点和给予的感受。感觉自己活在这个世上的经历又丰富了一点点，活过的痕迹也轻轻再划深一道，第一次体验了NPC恐怖主题的生化危机，我走在队伍最后负责护尾工作，每次丧尸来袭总能及时关门堵门，当时自己心里没底但回想做的还蛮不错的；第一次和新认识伙伴们吃意大利餐，在餐桌上相互自我介绍，谈天说地，从去过的城市聊工作趣事，话题接着一个，满是有趣；第一次去桌游馆玩了UNO，之前听都没听过的一种纸牌游戏，最后一把逆袭赢了，完美ending刚刚查了查发现竟然是1992年发行的游戏&amp;hellip;&lt;/p>
&lt;p>希望自己能够更加自信、勇敢，走出舒适区，多出去看看美丽世界，结交新朋友！人生其实就是在有限时间内获取尽量多的体验&lt;/p>
&lt;p>圣诞快乐🎄！我亲爱的朋友们！&lt;/p></description></item><item><title>失落的卫星-深入中亚大陆的旅程</title><link>https://hi-ernest.github.io/blog/%E5%A4%B1%E8%90%BD%E7%9A%84%E5%8D%AB%E6%98%9F-%E6%B7%B1%E5%85%A5%E4%B8%AD%E4%BA%9A%E5%A4%A7%E9%99%86%E7%9A%84%E6%97%85%E7%A8%8B-%E4%B9%A6/</link><pubDate>Sun, 19 Dec 2021 18:17:08 +0800</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/%E5%A4%B1%E8%90%BD%E7%9A%84%E5%8D%AB%E6%98%9F-%E6%B7%B1%E5%85%A5%E4%B8%AD%E4%BA%9A%E5%A4%A7%E9%99%86%E7%9A%84%E6%97%85%E7%A8%8B-%E4%B9%A6/</guid><description>&lt;blockquote>
&lt;p>昨天阅读进度条悄悄到了100%，心里想着要写下感受结果被拖延症拖着。&lt;/p>
&lt;/blockquote>
&lt;p>这是一本作者本人的中亚旅行游记，透过这本书，那些一个个陌生却藏在记忆的名字在记忆中唤醒，透吉尔吉斯斯坦、塔吉克斯坦、乌兹别克斯坦、哈萨克斯坦&amp;hellip;虽然不曾去过中亚，但作者描绘一人一物十分细腻，我关闭房间灯光只留下台灯微微暖光，脖子以下窝在暖和的被褥里，但我的思绪被书插上翅膀，飞到遥远的中亚，就好像飞到作者身边作为随从，用旁光者视角默默游历这一切。&lt;/p>
&lt;p>吉尔吉斯斯坦的&lt;a href="https://zh.wikipedia.org/wiki/%E6%AF%94%E4%BB%80%E5%87%AF%E5%85%8B">比什凯克&lt;/a>，现在机场的代号手FRU —— Frunze的缩写 伏龙芝，也是苏联时期的旧称。在这座城市，全球化的冲击或者没有大的成为问题。这里没有遍布世界各地的国际化快餐店，商场也不见不到任何耳熟能详的品牌。在某种程度上，比什凯克仍然是一种苏俄城市，有着棋盘一样街道、高大的行道树、雕像众多的公园，以及每个俄国城市都有的芭蕾舞剧院和马戏团。苏联早已离去，成为历史的弃儿。独立三十年来，苏联留下的遗产在无可奈何的磨损折旧，甚至渐渐沦为废墟，成为是怀旧对象。在比什凯克街道两侧，原本是苏联时代的混泥土排水沟，由于疏离管理，大都都扔满了垃圾。苏联时代的供电系统也处于慢性电力不足状态。夜幕降临，除了楚河大道，整个城市显得照明不足。坑洼不平的路面，莫名失踪的井盖，让夜间行走变得惊心动魄。&lt;/p>
&lt;p>虽然是首都但到处充满满满老旧苏联时代的印记，彷佛时代洪流滚滚前行就遗忘了这这儿。破败感、陈旧感、孤寂的寒冷时中亚地区带给我的感受，但另一方面内心还是有小小向往，可能现在我们处于被时代进程裹狭的往前走，看了太多的高楼大厦，钢筋水泥，光鲜亮丽快节奏的生活，不经会想回到之前的时代，虽然不那么发达，但生活节奏慢下来，满满体会观察路旁的花何时绽放，何时凋零&amp;hellip;&lt;/p>
&lt;p>那是一片苏联时代的高层住宅区，位于一条还算宽阔、干净的巷子里。巷口停着一辆报废的拉达轿车，漆面锈迹斑斑，像得了皮肤病，车厢堆满杂物。在骄阳下寻找着单元入口。像所有苏联时代的住宅区一样，这片住宅区也像一座巨大的迷宫。经历岁月的磨损，单元门牌号已经模糊不清。外面看上去，都是小小的阳台，就像一排排俄式剧院的包厢。进入里面，房间是一套一室公寓，墙边摆着一张玻璃餐桌，两边各有一把黑色椅子，房间里家具不多，显的空旷但摆在四处的小装饰，还是多少透露一点主任的品味。房间出乎意料的凉爽，窗户向外敞开着，风轻轻吹动淡紫色的窗帘，阴影随之舞动。窗户边旁边是一个小小的神龛，上面摆着香炉。&lt;/p>
&lt;p>什么时候我可以有自己整居的房子。干净宽阔的走道，打开门小小的鞋柜和杂物台，前面是大大落地窗，右手旁是五脏俱全的开发式厨房和吧台，吧台前有一张小小桌子带四个木暖色的椅子，往前两步是小小的沙发，沙发下是一张大大的地毯，上面是小小的茶几桌放了喝水的杯子和几包零食。阳光透过大大的玻璃落地窗，洒落在沙发上，我躺着沙发上让阳光肆意的照射，放空思绪。两个房间，一间是睡觉小小的床，整洁干净被褥，整理有序的衣柜，香薰和几本杂书放在床前小桌子上，另一间是工作间，升降的桌子也面向窗户，桌上放在电脑设本和书籍，一摞摞a4纸放在桌上，几只水笔散落&amp;hellip;&lt;/p>
&lt;p>为这样的生活努力！&lt;/p></description></item><item><title>最近风波感受</title><link>https://hi-ernest.github.io/blog/%E6%9C%80%E8%BF%91%E9%A3%8E%E6%B3%A2%E6%84%9F%E5%8F%97/</link><pubDate>Thu, 16 Dec 2021 00:27:12 +0800</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/%E6%9C%80%E8%BF%91%E9%A3%8E%E6%B3%A2%E6%84%9F%E5%8F%97/</guid><description>&lt;p>最近社会频频风波，江浙笼络在疫情的阴霾里，看着感染新冠人数不断增加&amp;hellip;&lt;/p>
&lt;p>腾讯大佬毛星云也永远的离开我们。但我想一个人是否存在在这个世上，并不是离世而是被世人所遗忘，所以我想用文字记录。我从未涉猎到游戏圈不知道这位大佬， 出了事情就查阅资料，才知道曾今年少也是满怀壮志，热血沸腾的年轻人，记录他写下的一段话&lt;/p>
&lt;blockquote>
&lt;p>我有一个梦想，有一天，西游记能出ACT，打神弑佛，那绝对比《战神》带感。&lt;/p>
&lt;p>我有一个梦想，有一天，上海滩能出沙盒游戏，而不是玩《GTA》感受美国梦，亦或是玩《热血无赖》体验国外公司强行塞给我们的「中国文化」。&lt;/p>
&lt;p>我有一个梦想，有一天，不少3A大作不需汉化，因为是我们自己的游戏，配音是中国的，文化也是中国的。&lt;/p>
&lt;p>我有一个梦想，将来的某一天，国产游戏能像中国的其他产业一样，以一个领跑者的姿态，面对全世界，面对全宇宙，器宇轩昂，扬眉吐气。&lt;/p>
&lt;p>这会是由我们一起去完成的梦想。等着我们的好消息！&lt;/p>
&lt;/blockquote>
&lt;p>看到这段话，内心不由自主地激动慷慨起来，梦想其实就像我们身处伸手不见五指的黑暗洞穴，一道光束从不远处直通通刺到我们眼睛，我们下意识抬起手来微微遮，透过手指缝隙，我们知道那是我们前行的方向，纵使不知道不久可以抵达，但前行路上因为这束光内心变得更加坚定，面容也更加坚毅。关于跳楼原因很多猜测，众说纷纭，但我认为最可能是抑郁症或者其他疾病，能让饱经社会磨练成年人自己崩溃，往往是自己给自己的那一道坎。我们身处于焦虑且信息发达的时代，可能别人一点成就就被人、媒体&amp;hellip;不断的放大，用焦虑换取所谓的点击率、关注度。年轻人、中年人往往就被裹狭着卷进焦虑的漩涡当中，不安全感、焦虑感、自我厌恶&amp;hellip;这些本来很小的情绪，也随之变大，如果没有守住初心保持自信，那生理、心理的疫病就悄悄附着在你的身上，悄无声息的消耗你的精神、侵蚀你内心。&lt;/p>
&lt;p>我想说就是心态放平，与世无争的心态，不要计较一时的得失，一定一定要相信自己，遇到在糟糕、痛苦的事情，要相信困难只是一时的，总会过去，不要埋怨自己和他人，遇到问题就去解决问题，而不是痛苦折磨自己。凡事告诉自己，是有退路的，大不了我就干嘛干嘛。天道酬勤，在世上勤快的人总会有饭吃的。也告诫我自己!&lt;/p></description></item><item><title>一只船的孤独</title><link>https://hi-ernest.github.io/blog/%E4%B8%80%E5%8F%AA%E8%88%B9%E7%9A%84%E5%AD%A4%E7%8B%AC/</link><pubDate>Mon, 13 Dec 2021 01:14:53 +0000</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/%E4%B8%80%E5%8F%AA%E8%88%B9%E7%9A%84%E5%AD%A4%E7%8B%AC/</guid><description>&lt;h2 id="原文">原文&lt;/h2>
&lt;p>一只船孤独地航行在海上，&lt;/p>
&lt;p>它既不寻求幸福，&lt;/p>
&lt;p>也不逃避幸福，&lt;/p>
&lt;p>它只是向前航行，&lt;/p>
&lt;p>底下是沉静碧蓝的大海，&lt;/p>
&lt;p>而头顶是金色的太阳。&lt;/p>
&lt;p>将要直面的，&lt;/p>
&lt;p>与已成过往的，&lt;/p>
&lt;p>较之深埋于它内心的&lt;/p>
&lt;p>皆为微沫。&lt;/p>
&lt;p>&amp;ndash;《一只孤独的船》莱蒙托夫 柴静译&lt;/p>
&lt;hr>
&lt;h2 id="在这首诗引起非常强的共鸣">在这首诗引起非常强的共鸣&lt;/h2>
&lt;p>时代的年轻人，远离家乡，在在狂风骤雨中顽强前行，&lt;/p>
&lt;p>向着理想和光明，追寻自由与未来，希望摆脱平庸。&lt;/p></description></item><item><title>垃圾回收GC</title><link>https://hi-ernest.github.io/blog/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6gc/</link><pubDate>Mon, 13 Dec 2021 01:21:40 +0800</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6gc/</guid><description>&lt;h2 id="什么是gc">什么是GC&lt;/h2>
&lt;blockquote>
&lt;p>GC指一种自动的&lt;a href="https://zh.wikipedia.org/wiki/%E8%A8%98%E6%86%B6%E9%AB%94%E7%AE%A1%E7%90%86">存储器管理&lt;/a>机制，当某个程序占用的一部分内存空间不再被这个程序访问时，这个程序会借助&lt;strong>垃圾回收&lt;/strong>算法向操作系统归还这部分内存空间。垃圾回收器可以减轻程序员的负担，也减少程序中的错误。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>-from wiki&lt;/p>
&lt;/blockquote>
&lt;h2 id="垃圾回收算法有哪些-分别的优缺点">垃圾回收算法有哪些 分别的优缺点&lt;/h2>
&lt;p>================&lt;/p>
&lt;h2 id="引用计数法">引用计数法&lt;/h2>
&lt;hr>
&lt;p>对每个对象设置引用计数，当对象被引用+1，失去引用/销毁-1，当计数为0的时回收对象内存&lt;/p>
&lt;p>优点：简单直接，回收速度快&lt;/p>
&lt;p>缺点：需要额外空间维护引用计数，无法解决对象的循环引用问题&lt;/p>
&lt;h2 id="标记清除法">标记清除法&lt;/h2>
&lt;hr>
&lt;p>从根对象开始遍历所有引用对象，引用的对象打上标记tag，遍历完成，将没有标记的进行回收&lt;/p>
&lt;p>优点：解决引用计数法的缺点&lt;/p>
&lt;p>缺点：会产生大量不连续的内存碎片，导致无法给大对象分配内存&lt;/p>
&lt;h2 id="标记整理法">标记整理法&lt;/h2>
&lt;hr>
&lt;p>让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存&lt;/p>
&lt;p>优点：不会产生内存碎片&lt;/p>
&lt;p>缺点：需要移动大量对象，处理效率比较低。&lt;/p>
&lt;h2 id="复制">#复制&lt;/h2>
&lt;p>&amp;ndash;&lt;/p>
&lt;p>将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理&lt;/p>
&lt;p>优点：不会产生内存碎片，每次清除针对的都是整块内存&lt;/p>
&lt;p>缺点：只使用了内存的一半、移动对象需要耗费时间，效率低于标记清除法&lt;/p>
&lt;h2 id="分代收集法">分代收集法&lt;/h2>
&lt;hr>
&lt;p>按照对象的生命周期长短划分代空间，生命周期长的放在老年代，生命周期短的放在新生代&lt;/p>
&lt;p>优点：回收性能好&lt;/p>
&lt;p>缺点：算法复杂&lt;/p>
&lt;h2 id="go的垃圾回收采用是哪个gc方法">go的垃圾回收采用是哪个GC方法&lt;/h2>
&lt;p>================&lt;/p>
&lt;p>go采用的是标记清除法，核心就是标记出哪些是内存还在使用（被引用的），哪些内存不再使用（未被引用），把未被引用的内存回收掉，供后续内存分配使用。&lt;/p>
&lt;p>暂时无法在飞书文档外展示此内容&lt;/p>
&lt;p>特殊case：如果内存块存放的是指针，那还需要递归的进行标记，全部标记完后，只保留标记的内存，未被标记的内存全部进行回收&lt;/p>
&lt;h2 id="为什么go采用标记清除法而不是其他的方法">为什么Go采用标记清除法，而不是其他的方法？&lt;/h2>
&lt;p>======================&lt;/p>
&lt;p>引用计数无法解决循环引用，排除&lt;/p>
&lt;p>标记整理好处在于解决内存碎片化的问题，但是Go运行时的分配算法基于tcmalloc，基本上没有碎片问题，对于gc并没有提升&lt;/p>
&lt;p>复制只能用一半的内存，还需要大量移动，效率低&lt;/p>
&lt;p>分代收集的话也不适用，因为go的gc主要目标是新创建的对象上，即存活时间短更利回收，而不是频繁的检查所有对象&lt;/p>
&lt;blockquote>
&lt;p>逃逸分析：编译器决定内存分配的位置，不需要程序员指定。函数中申请一个新的对象&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>如果分配到栈，则函数执行结束就可自动将内存回收&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>如果分配到堆，则函数执行结束可交给GC(垃圾回收)处理&lt;/p>
&lt;/blockquote>
&lt;p>go编译器的逃逸分析，将大部分新生对象存储在栈里面，直接被回收，生命周期短的对象直接回收并不需要gc处理，长期存在的/比较大的对象会分配到堆中，才被gc回收，所以分代回收并没有实质上提升&lt;/p>
&lt;h2 id="什么是三色标记法mark-sweep">什么是三色标记法？mark-sweep&lt;/h2>
&lt;p>===================&lt;/p>
&lt;p>人为的用三种颜色好描述go的gc过程，内存中的对象并无颜色区分&lt;/p>
&lt;p>三色对应了垃圾回收中的三种状态：&lt;/p>
&lt;p>灰色：对象放入“标记队列”中等待（待处理的对象）&lt;/p>
&lt;p>黑色：对象已被标记为使用&lt;/p>
&lt;p>白色：对象未被标记&lt;/p>
&lt;p>步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>开始gc初，所有对象放入白色队列&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从根对象开始遍历，将所有可达的对象，标记为灰色，放入灰色队列（待处理队列）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从灰色队列中取出灰色对象，将它引用的对象标记灰色放入灰色队列，它自己标黑色，放入黑色队列&lt;/p>
&lt;/li>
&lt;li>
&lt;p>重复步骤3，直到灰色队列为空，这时候白色对象是不可达对象，回收白色对象&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="什么是根对象根对象有哪些">什么是根对象，根对象有哪些？&lt;/h2>
&lt;p>==============&lt;/p>
&lt;ol>
&lt;li>
&lt;p>全局变量：程序在编译期就能确定的那些存在于程序整个生命周期的变量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行栈：每个 goroutine 都包含自己的执行栈，这些执行栈上包含栈上的变量及指向分配的堆内存区块的指针&lt;/p>
&lt;/li>
&lt;li>
&lt;p>寄存器：寄存器的值可能表示一个指针，参与计算的这些指针可能指向某些赋值器分配的堆内存区块&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="怎么的条件会触发go的gc">怎么的条件会触发Go的GC&lt;/h2>
&lt;p>=============&lt;/p>
&lt;ul>
&lt;li>GOGC threshold&lt;/li>
&lt;/ul>
&lt;p>每次内存分配时检查当前内存分配量是否达到阀值，达到则会触发gc&lt;/p>
&lt;p>阀值 = 上次gc内存分配量 * 内存增长率&lt;/p>
&lt;p>内存增长率是由环境变量GCGO控制，默认是100，即当内存扩大一倍的时候启动gc&lt;/p>
&lt;ul>
&lt;li>runtime.GC()&lt;/li>
&lt;/ul>
&lt;p>类似Java的system.gc api手动代码触发gc&lt;/p>
&lt;ul>
&lt;li>runtime.forcegcperiod（2min）&lt;/li>
&lt;/ul>
&lt;p>强制定期gc，默认2min触发一次gc，在runtime/proc.go:forcegcperiod&lt;/p>
&lt;h2 id="go的gc有哪些优化">go的GC有哪些优化&lt;/h2>
&lt;p>==========&lt;/p>
&lt;p>标记-清理需要stw，需要暂停所有的goruntine，做gc然后再恢复。&lt;/p>
&lt;p>减少stw时间，可以提升go的gc性能&lt;/p>
&lt;h2 id="写屏障write-barrier">写屏障(Write Barrier) &lt;/h2>
&lt;p>本质就是每次内存写操作时候，额外执行一小段代码&lt;/p>
&lt;p>写屏障就是让goroutine与GC同时运行的手段，虽然写屏障不能完全消除stw，但是可以大大减少stw时间，类似开关，gc的特定时候开启，开启后指针传递时，把指针标记，即本轮不回收，下次gc再确定&lt;/p>
&lt;h2 id="辅助gcmutator-assist">辅助GC(Mutator Assist) &lt;/h2>
&lt;blockquote>
&lt;p>为了防止内存分配过快，在GC执行过程中，如果goroutine需要分配内存，那么这个goroutine会参与一部分GC的 工作，即帮助GC做一部分工作，这个机制叫作Mutator Assist&lt;/p>
&lt;/blockquote>
&lt;h2 id="代码gc编程">代码GC编程&lt;/h2>
&lt;p>多制造inline的机会，将新对象尽可能都分配到栈而不是堆，因为go实现了退栈即释放，不影响gc&lt;/p>
&lt;h3 id="代码减少逃逸分析">代码减少逃逸分析：&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>尽量使用局部变量（编译器会根据变量是否被外部引用来决定是否逃逸）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>参数、返回数值传递值（传指针还是数值，需要修改原值或者内存比较大结构体传指针，而对于只读的占内存较少的结构体，传值获取较好性能）&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="代码简单直白制造inline机会">代码简单直白，制造inline机会&lt;/h3>
&lt;h3 id="减少分配次数">减少分配次数&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">a&lt;/span> = make([]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1234&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">b&lt;/span> = make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#ae81ff">2048&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="缓存对象">缓存对象&lt;/h3>
&lt;h1 id="什么是inline">什么是inline&lt;/h1>
&lt;blockquote>
&lt;p>&lt;strong>内联扩展&lt;/strong>或&lt;strong>内联&lt;/strong>是一种手动或&lt;a href="https://en.wikipedia.org/wiki/Compiler_optimization">编译器优化&lt;/a>，它用被调用函数的主体替换函数&lt;a href="https://en.wikipedia.org/wiki/Call_site">调用站点&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>from wiki&lt;/p>
&lt;/blockquote>
&lt;p>通过参数-gflags=&amp;quot;-m&amp;quot;查看&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span> (&lt;span style="color:#a6e22e">x&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>,&lt;span style="color:#a6e22e">y&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a6e22e">fmt&lt;/span>.println(&lt;span style="color:#a6e22e">a&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#f92672">-&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#75715e">//inline function add replace by the body of the function
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>    &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#a6e22e">fmt&lt;/span>.println(&lt;span style="color:#a6e22e">a&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不用使用内联的case：闭包调用、select、for、defer、go关键词创建的协程&lt;/p>
&lt;p>总结：采用越简单的实现，对于傻瓜式语言性能越好&lt;/p>
&lt;h1 id="逃逸分析">逃逸分析&lt;/h1>
&lt;p>通过命令go build -gcflags &amp;lsquo;-m&amp;rsquo;命令查看&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">refs&lt;/span> = make([]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#ae81ff">32&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">fc&lt;/span>()  {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>   &lt;span style="color:#a6e22e">refs&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] = new(&lt;span style="color:#66d9ef">int&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>   &lt;span style="color:#a6e22e">fc&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>致明年今日的自己</title><link>https://hi-ernest.github.io/blog/%E8%87%B4%E6%98%8E%E5%B9%B4%E4%BB%8A%E6%97%A5%E7%9A%84%E8%87%AA%E5%B7%B1/</link><pubDate>Sun, 10 Oct 2021 21:34:36 +0800</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/%E8%87%B4%E6%98%8E%E5%B9%B4%E4%BB%8A%E6%97%A5%E7%9A%84%E8%87%AA%E5%B7%B1/</guid><description>&lt;p>展信悦～&lt;/p>
&lt;p>哈喽兄弟，我是去年的你，恭喜你！当你看到这封信的时候，说明你还活着这个世界上哈哈哈哈&lt;/p>
&lt;p>现在你还在北京字节吗？你一个南方人大老远跑来北京，这一年你收获的如何，有没有后悔来这么远，远离家乡亲人小伙伴。但其实也不必后悔了，你不经历这些也不会有现在此时此刻的我，人的思想和精神的蜕变都是潜移默化的，都是在一点一滴行动和思考中蜕变的。&lt;/p>
&lt;p>怎样最近还好吗？有没有坚持每天八杯水？有没有少熬夜？有没有比现在的我技能和软素质提高。&lt;/p>
&lt;p>有没有好好刷题，有没有试试面面外企，像微软、paypai、zoom、ebay之类的，有没有如我现在期望的回到上海在外企开始新的征途～&lt;/p>
&lt;p>现在的我还是挺忙的，早10:30晚10差不多的节奏，毕竟自己也比较菜，不懂的东西蛮多的，但一下子已经毕业一年多了。经历了初入职场但离职，迷茫痛苦到振奋起来，重新刷题找工作，从上海到北京，越跑离家越远。钱确实也变多了，但压力也变大了，但身边工作伙伴还是挺奶斯的，但总体还是靠自己。顶着一定的压力，心里默默日拱一卒，太多的东西需要学习就想放弃，后面想想每天学一点思考一点收获一点就够了，不必要求自己一口吃成大胖子，也吃不成也没必要。现在忙的都不锻炼了，但也是借口，还是得去健身房，免费的健身房离住的地方走路不到十分钟，但我就去了三次，实在不该哈哈。给你写这封信时候十一过后，现在的北京一下子速冻，13 14度，我感到北方深深的恶意，和同事戏谑我怕是要冻死在北京的冬天里，希望你现在再温暖的南方把，北方还是终究不适合咱们南方人。&lt;/p>
&lt;p>希望你已看完100本书籍 记录一下每本书心得 不管是怎样的书籍，保持阅读就对了兄弟&lt;/p>
&lt;p>希望你已看完20部 豆瓣经典电影还是走入电影院 也写小小的心得tag 记录和仪式感不能丢嘛&lt;/p>
&lt;p>希望你走遍周边的城市 趁年轻就走走看看嘛 不要宅在一方天地，对了城市没啥感觉了出大自然把，尝试一下露营吧现在的我很是向往。这个前提就是多认识新朋友，一个地方的可以同出游，多主动勇敢点敢于搭腔，真诚自我介绍，真诚待人，你一定能认识新朋友。&lt;/p>
&lt;p>对了，你还是不是程序员了还是离职了？&lt;/p>
&lt;p>还是程序员的话leetcode可是不能停的呀，算法不能停，现在我是270道 easy132 medium123 hard15&lt;/p>
&lt;p>一年了你最起码也要闯过500道 主要还是medium300吧 别慌！我相信自己老哥&lt;/p>
&lt;p>对了，你有没有租到带阳台的高层布局满意的房子，现在的我真的想换房子不知道你有没有帮我达成心愿&lt;/p>
&lt;p>希望你还是积极向上，生活本身就是没有意义的，但我们身而为人可以赋予自己想要的意义，过自己想要的有意义的生活。坚持一天八杯水、多多跑步多运单、按时吃喝、按时休息别熬夜！&lt;/p>
&lt;p>24岁的我给25岁的你一封信 期待你的回信!&lt;/p></description></item><item><title>2021/04/19有感</title><link>https://hi-ernest.github.io/blog/2021-04-19/</link><pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/2021-04-19/</guid><description>&lt;p>周五晚上回老家看望了阿婆，老人1934年生人，今年也87了。有时候不免感到生老病死，时光流转更替，老一辈是这个时代甩在身后的人了，他们不懂抖音，不懂游戏，但饱饭、电视和熟人之间的闲聊也是他们最大的娱乐方式，对于老一辈的岁数难免疾病缠身，我们身为后辈其实能做的就只有常回家看看，围绕在她跟前聆听唠叨听听那些简单到不能简单的琐事，说说自己现在目前的情况，不懂他们懂不懂尽可能用简单话语解释，其实就是虽然偶尔遇到困难，但总体一切顺利，一直在路上，勿念我会照顾好自己。这次回去最大触动，就是阿婆那句话，她看着大伯给我钱，在一旁说道，“阿婆没有钱给你了，都花在看病上了”&amp;hellip;现在想想，心里的弦仿佛被狠狠的触动，泪水小小的在眼眶中打转，对时间不断向前谁也改变不了，生老病死是人一生的必修课，很残忍但也必须去面对去经历&amp;hellip;.&lt;/p>
&lt;p>有时候不敢前面的道路有多难，我都会想到那些支持我的人，还有我自己要相信自己，相信的力量一直会坚持着我！&lt;/p>
&lt;p>信念感！！&lt;/p>
&lt;p>付出行动：有了工资和积蓄，过年过节给阿婆红包表达自己一份孝心的挂念（转给大姑让大姑代为转达）&lt;/p>
&lt;p>每次回老家只要蹭车回去，总会干这样那样活，以后我就自己打个车或者坐大巴回去看望阿婆&lt;/p>
&lt;p>我是一个很念旧的人，有时候会想和家里人在一起谈天谈地，最后发现跟表哥、堂哥、表弟等那些人，有时候交流都不是一个频道上，都是自以为是的家伙，自我感觉良好。这么大的连吃个饭，都是让自己母亲来付钱，家里人吃个饭请这个人那个人，好像是自己请客，不用自己的钱也能心安理得实在不敢恭维。请的人都是素质不敢恭维，一直说程序员35岁什么什么了，现在年轻可以拿高薪资了，容易老了被替换，中国最不缺的就是人，人很廉价，社会地位啥的巴拉巴拉&amp;hellip;那你考公务员还不是现在还没考上，自以为是在外待了几年并没有什么情商啥的，所谓请个人交流北京注意事项，文化啥的，其实就是一己私欲顺便请高中同学吃饭自己叙旧，以后这些饭局不会再参与，告辞！&lt;/p>
&lt;p>他们赚钱也不会给你，你赚钱也不会给他们，并没有什么关系&lt;/p>
&lt;p>以后少联系，做好自己就够了！靠自己，努力提升自己就可，不必理会和在意对他人评价和贴标签，不懂你的人那就继续让他们带着偏见和歧视吧，做他们的井底之蛙、固步自封，雨我无瓜！讨厌自我感觉良好，给别人打标签，告诉你你应该怎么怎么，提出问题但不教你如何解决，给你制造焦虑，真的非常拉垮和恶心这些人。&lt;/p>
&lt;p>付出行动：做好自己，努力提升自己，不与他们有更多的联系和交流（能不联系就不联系）&lt;/p>
&lt;p>不主动说自己情况，多留心眼，问一句回答一句，就是这样！&lt;/p>
&lt;p>以后阿婆、大姑、大伯之类长辈给我的钱，我再也不会要，因为我长大了我有工作我自己有积蓄。&lt;/p>
&lt;p>这几天的打算：&lt;/p>
&lt;ul>
&lt;li>将上海一部分东西让涛哥帮忙打包📦寄去北京居住的宾馆&lt;/li>
&lt;li>在家行李打包（文件类、衣服类、其他配件）两个行李箱 + 书包&lt;/li>
&lt;li>多帮助母亲收拾家里卫生和洗碗等，多聊聊天&lt;/li>
&lt;li>继续算法和学习GO语言&lt;/li>
&lt;li>滴滴去机场&lt;/li>
&lt;/ul></description></item><item><title>Java知识点记忆点-补充</title><link>https://hi-ernest.github.io/blog/%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BF%86%E7%82%B9-%E8%A1%A5%E5%85%85/</link><pubDate>Sun, 11 Apr 2021 10:52:00 +0800</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BF%86%E7%82%B9-%E8%A1%A5%E5%85%85/</guid><description>&lt;h3 id="什么是微服务">什么是微服务？&lt;/h3>
&lt;p>将单体系统拆分职责相对于单一的一个个项目，每个项目提供不同的服务内容，服务之间的通过rpc来调用&lt;/p>
&lt;p>一个服务的宕机、不可用，不会影响上下游服务，做到服务熔断隔离。根据每个服务访问流量的大小，指定服务的扩容和缩容，更加独立的进行，减少不必要资源的消耗。&lt;/p>
&lt;hr>
&lt;h3 id="java基础">Java基础&lt;/h3>
&lt;p>&lt;em>&lt;strong>抽象类和接口的区分？什么时候用接口 什么时候用抽象类?&lt;/strong>&lt;/em>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>抽象类主要是复用代码，将不同类具有相同行为A属性，交给抽象类实现，避免子类都去实现&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接口只能定义方法（类行为的约束），类可以实现接口重写必须实现的方法，也可以额外写其他行为方法&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="java虚拟机">Java虚拟机&lt;/h3>
&lt;h4 id="gc-roots指的是哪些对象">GC Roots指的是哪些对象？&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>JVM栈中本地变量表中引用的对象&lt;/p>
&lt;/li>
&lt;li>
&lt;p>方法区中类静态属性引用变量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>方法区中常量引用对象&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本地方法栈中Native方法&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="方法区的回收有哪些对象">方法区的回收有哪些对象？&lt;/h4>
&lt;p>&lt;em>&lt;strong>废弃常量的回收、无用类的回收&lt;/strong>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类及其任何派生子类的实例。
加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如 OSGi、JSP 的重加载等，否则通常是很难达成的。&lt;/li>
&lt;li>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="spring框架">Spring框架&lt;/h3>
&lt;h4 id="spring和springboot的区别">Spring和SpringBoot的区别？&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>springboot极大简化spring所需要的配置&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内嵌了tomcat容器 简化部署&lt;/p>
&lt;/li>
&lt;li>
&lt;p>引入starters 集合应用依赖包 快速搭建业务框架&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="spring的事务隔离级别有哪些四种">Spring的事务隔离级别有哪些？（四种）&lt;/h4>
&lt;p>采用默认的隔离级别（DB是怎样隔离级别 那Spring就是怎样的隔离级别）[MySQL默认是&lt;strong>可重复读&lt;/strong>]&lt;/p>
&lt;ol>
&lt;li>
&lt;p>读未提交（read uncommited）[脏读、不可重复读、幻读]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>读已提交（read commited）[避免脏读，但可能不可重复读、幻读]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可重复读（repeatable read）[避免脏读和不可重复读，但可能幻读]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>串行化（Serializable）[避免以上问题]&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h4 id="spring的事务传播级别有哪些七种传播行为">Spring的事务传播级别有哪些？（七种传播行为）&lt;/h4>
&lt;p>&lt;em>&lt;strong>支持当前事务：&lt;/strong>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>当前有事务加入事务，没有事务，新建事务&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当前有事务加入事务，没有事务，以非事务方式运行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当前有事务加入事务，没有事务，抛弃异常&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;em>&lt;strong>不支持当前事务情况：&lt;/strong>&lt;/em>&lt;/p>
&lt;p>前提：t &amp;lt;- 事务（transaction）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>if 当前 ∃ t -&amp;gt; t 挂起，创建新的事务t'&lt;/p>
&lt;/li>
&lt;li>
&lt;p>以非事务的方式运行，if 当前 ∃ t -&amp;gt; t 挂起&lt;/p>
&lt;/li>
&lt;li>
&lt;p>以非事务的方式运行，if 当前 ∃ t -&amp;gt; thows exception&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If 当前∃ t -&amp;gt; 则创建一个事务作为当前事务的嵌套事务运行&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="spring中有哪些设计模式分别有哪些">Spring中有哪些设计模式？分别有哪些&lt;/h4>
&lt;p>IOC：工厂模式 + 反射&lt;/p>
&lt;p>AOP：代理模式&lt;/p>
&lt;p>JDBCTemplate：模版模式&lt;/p>
&lt;p>Spring中Bean：单例模式&lt;/p>
&lt;p>SpringMVC中的适配器HandlerAdatper：适配器模式&lt;/p>
&lt;p>spring的事件驱动模型（ApplicationListener）：观察者模式&lt;/p>
&lt;p>Spring中Observer模式常用的地方是listener的实现&lt;/p>
&lt;p>Spring装饰器模式：在类名上有两种表现：一种是类名中含有Wrapper，另一种是类名中含有Decorator。&lt;/p>
&lt;p>&lt;a href="https://cloud.tencent.com/developer/article/1593982">https://cloud.tencent.com/developer/article/1593982&lt;/a>&lt;/p>
&lt;hr>
&lt;h4 id="代理模式和装饰器模式的区别">代理模式和装饰器模式的区别？&lt;/h4>
&lt;p>代理模式是对代理对象加以控制，比如在对象前置或者后置，帮助你完成其他不用关心的事情，比如日志&lt;/p>
&lt;p>装饰器模式是对装饰对象功能的增强，还是调用之前的方法，但有新的功能，是继承的替代模式&lt;/p>
&lt;hr>
&lt;h4 id="有哪些方法可以实现单例模式">有哪些方法可以实现单例模式？&lt;/h4>
&lt;p>懒汉式（当只有在使用时才进行类对象创建）&lt;/p>
&lt;p>饿汉式（静态常量、静态代码块）&lt;/p>
&lt;p>双重检验锁也是懒汉式&lt;/p>
&lt;p>&lt;strong>静态内部类（静态属性只有在第一次加载类的时候初始化，通过getInstance）&lt;/strong>&lt;/p>
&lt;p>&lt;strong>枚举&lt;/strong>&lt;/p>
&lt;hr>
&lt;h3 id="数据库mysql">数据库MySQL&lt;/h3>
&lt;h4 id="数据库的事务特性四个">数据库的事务特性？（四个）&lt;/h4>
&lt;p>原子性、一致性、隔离性、持久性&lt;/p>
&lt;hr>
&lt;h3 id="mysql的事物并发问题">MySQL的事物并发问题&lt;/h3>
&lt;p>脏读、不可重复读、幻读&lt;/p>
&lt;hr>
&lt;h3 id="mysql事物隔离级别">MySQL事物隔离级别&lt;/h3>
&lt;p>读未提交、读已提交、可重复读、可串行化&lt;/p>
&lt;hr>
&lt;h4 id="什么是mvcc怎么解决并发一致性问题">什么是MVCC？怎么解决并发一致性问题&lt;/h4>
&lt;p>多版本并发控制，创建版本号和删除版本号（创建数据行的快照时的系统版本号）&lt;/p>
&lt;p>可重复读下，对数据行修改事务T1，读取的数据行快照的创建版本号 &amp;lt; 事务T的版本号（比较）&lt;/p>
&lt;p>读取的数据行快照的删除版本号 &amp;gt; 事务T的版本号 否则表示这行数据已被删除&lt;/p>
&lt;hr>
&lt;h4 id="mvcc解决了哪两种隔离级别">MVCC解决了哪两种隔离级别？&lt;/h4>
&lt;p>提交读 和 可重复读&lt;/p>
&lt;hr>
&lt;h4 id="如何解决幻读问题在x隔离级别使用xx和xx">如何解决幻读问题？（在X隔离级别使用XX和XX）&lt;/h4>
&lt;p>&lt;em>&lt;strong>可重复读隔离级别 + Next-key locks&lt;/strong>&lt;/em>&lt;/p>
&lt;pre tabindex="0">&lt;code>Next-key Lock: {
1. record lock (锁一个记录上的索引，而不是记录本身，没有索引自动在主键上创建聚簇索引)
2. gap lock （锁定索引之间的间隙，但不包括索引本身）
}
&lt;/code>&lt;/pre>&lt;h4 id="间隙锁锁的是哪些范围什么操作导致间隙锁">间隙锁锁的是哪些范围？什么操作导致间隙锁&lt;/h4>
&lt;h4 id="快照读和当前读的区别">快照读和当前读的区别？&lt;/h4>
&lt;p>select XXX 进行快照读 从undo log中快照获取&lt;/p>
&lt;p>select XX for update 加锁保证拿取最新的数据&lt;/p>
&lt;p>每条记录更新同时记录一条回滚记录（回滚操作记录undo log）&lt;/p>
&lt;hr>
&lt;h4 id="数据库三范式">数据库三范式？&lt;/h4>
&lt;p>第一范式：表中所有属性为最小原子属性，不可在分割 不能表中嵌套表&lt;/p>
&lt;p>第二范式：属性对主键不存在部分函数依赖（学号、姓名、性别、年龄、课程号、分数）主键[学号、课程号]&lt;/p>
&lt;p>第三范式：属性对主键不存在传递函数依赖（学号、姓名、学院、院长）主键[学号]&lt;/p>
&lt;p>&lt;strong>如何解决第二、第三？（看业务场景使用不同的范式）&lt;/strong>&lt;/p>
&lt;hr>
&lt;h4 id="undo日志用来干嘛binlog日志redo日志">undo日志用来干嘛？binlog日志？redo日志？&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>mvcc使用undo log（&lt;em>&lt;strong>回滚日志：记录每行数据的版本&lt;/strong>&lt;/em>）来实现快照 保存事务发生之前数据的快照版本，可以回滚&lt;/p>
&lt;/li>
&lt;li>
&lt;p>redo log innoDB引擎层日志（&lt;em>&lt;strong>重做日志【往前滚- 数据页的物理修改，且只能恢复最后一次提交的位置】&lt;/strong>&lt;/em>）：记录事务操作变化后数据修改之后的值，不管事务是否提交都会记录。万一DB宕机异常启动，使用redo log恢复数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>binlog（归档日志）是二进制文件，是MySQL Server层记录的日志。MySQL主从复制中，从库用主库的binlog进行复制&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>（binlog只记录对数据的修改操作，用于主从复制、增量恢复）&lt;/strong>&lt;/p>
&lt;hr>
&lt;h5 id="redo-log">redo log&lt;/h5>
&lt;p>是innoDB存储引擎层的日志，用来记录数据库事务操作的变化，记录是的数据修改之后的值，无论事物是否提交都会记录。在实例或者介质crash，redolog派上用场，用来恢复数据，保证数据的完整性。&lt;/p>
&lt;p>更新操作涉及到write ahead loging，先写日志在写磁盘。inndb先把更新语句写redo log再更新内存，语句执行完毕后，在空闲的时候或者按照设定的更新策略将redo log中内容更新到磁盘当中。&lt;/p>
&lt;p>有了redo log，在db异常重启时候，根据redo log恢复，实现crash-safe&lt;/p>
&lt;p>&lt;img src="https://img-blog.csdnimg.cn/img_convert/1af0b4169b7d248fdb05e9d1d189b854.png" alt="RUNOOB 图标">&lt;/p>
&lt;p>&lt;em>&lt;strong>redo日志有固定大小，写满需要重头写&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://img-blog.csdnimg.cn/img_convert/4101e39d0acf0d31a758f0ecc2cca829.png" alt="RUNOOB 图标">&lt;/p>
&lt;h4 id="innodb是如何实现事务">InnoDB是如何实现事务？&lt;/h4>
&lt;p>InnoDB实现事务 -&amp;gt; ACID：使用这三个日志 + 锁（排他锁/共享锁）&lt;/p>
&lt;p>原子性：undo log(回滚日志)：记录数据修改前的状态，万一回滚恢复之前的状态&lt;/p>
&lt;p>一致性：redo log(重做日志)：记录数据修改后的状态&lt;/p>
&lt;p>隔离性：锁（行级锁、表锁），可分共享锁、排他锁&lt;/p>
&lt;p>持久性：undo log(回滚日志) + redo log(重做日志)&lt;/p>
&lt;hr>
&lt;h4 id="binlog文件是什么存储的数据形式有哪些有什么优缺">binlog文件是什么？存储的数据形式有哪些？有什么优缺？&lt;/h4>
&lt;p>bin log(二进制日志文件)，只记录对数据的修改操作，主要是&lt;strong>主从复制&lt;/strong>和&lt;strong>增量恢复&lt;/strong>&lt;/p>
&lt;p>MySQL binlog日志三种格式？&lt;/p>
&lt;ol>
&lt;li>Statement：每一条会修改的SQL都会记录到binlog中&lt;/li>
&lt;/ol>
&lt;p>（优点：减少日志量 - 缺点：主从复制中，带有特定函数的SQL，从库执行可能出现不一致问题）&lt;/p>
&lt;ol start="2">
&lt;li>Row：不记录SQL语句上下文信息，仅保存哪条记录被修改成什么样&lt;/li>
&lt;/ol>
&lt;p>（优点：不需要记录SQL的上下文信息，以每行记录的修改来记录，解决SQL带有特定函数的问题&lt;/p>
&lt;p>缺点：biglog日志量大（update多条，每一条修改都会记录））&lt;/p>
&lt;ol start="3">
&lt;li>Mixedlevel：以上两种level混合使用&lt;/li>
&lt;/ol>
&lt;p>[一般语句的修改使用Statement格式保存，一些函数无法则使用Row格式]&lt;/p>
&lt;p>会根据每一条具体的SQL语句来区分记录的日志形式&lt;/p>
&lt;hr>
&lt;h4 id="mysql主从复制怎么实现">MySQL主从复制怎么实现？&lt;/h4>
&lt;p>&lt;strong>binlog线程、io线程、sql线程&lt;/strong>&lt;/p>
&lt;p>1.binlog dump线程将主服务器上的数据更改写入二进制文件（Binary log）&lt;/p>
&lt;p>2.io线程负责从主服务器中读取binlog，并写入从服务器的中继日志（Relay log）&lt;/p>
&lt;p>3.sql线程读取中继日志，解析主服务器已执行的数据修改，并在从服务器进行重放（Replay）&lt;/p>
&lt;hr>
&lt;h4 id="mysql的crash-safe怎么实现的">MySQL的crash-safe怎么实现的？？&lt;/h4>
&lt;p>三个日志+WAL+2PC&lt;/p>
&lt;p>&lt;a href="https://cloud.tencent.com/developer/article/1631999">https://cloud.tencent.com/developer/article/1631999&lt;/a>&lt;/p>
&lt;hr>
&lt;h4 id="为什么需要分库分表">为什么需要分库分表？&lt;/h4>
&lt;p>数据量太大，查询效率低下&lt;/p>
&lt;hr>
&lt;h4 id="怎样分库分表">怎样分库分表？&lt;/h4>
&lt;p>垂直拆分：按照业务（订单、商品）放在不同数据库，独立出来，就算一个业务出错不影响另一个业务，提高并发&lt;/p>
&lt;p>缺点：无法解决单表数据越来越大的问题&lt;/p>
&lt;p>水平拆分：将单表数据拆分多表，甚至放在不同库当中。按照日期时间划分、按照hash取模划分&lt;/p>
&lt;p>采用Apace sharding-jdbc来作分库分表中间件&lt;/p>
&lt;p>注意⚠️！需要做不同纬度的数据冗余，方便根据不同纬度的查询（空间换时间的方式）&lt;/p>
&lt;hr>
&lt;h4 id="索引优化有哪些哪些情况下索引会失效">索引优化有哪些？（哪些情况下索引会失效？）&lt;/h4>
&lt;p>只针对频繁查询的字段 设置索引&lt;/p>
&lt;p>可以使用覆盖索引&lt;/p>
&lt;p>避免索引失效（使用全值匹配、符合最左前缀原则[中间索引不能断]）&lt;/p>
&lt;p>&lt;strong>失效：&lt;/strong>&lt;/p>
&lt;p>where条件后用函数、运算符&lt;/p>
&lt;p>模糊查询 like&amp;rsquo;%冰&amp;rsquo;（使用通配符开头）&lt;/p>
&lt;p>不符合最左原则的联合索引&lt;/p>
&lt;p>索引字段上!= &amp;lt;&amp;gt;这样会导致索引失效（is NULL / is not NULL）&lt;/p>
&lt;hr>
&lt;h4 id="索引case注意">索引case！！！注意⚠️&lt;/h4>
&lt;p>联合索引（a、b、c）&lt;/p>
&lt;p>a = &amp;rsquo;&amp;rsquo; and b = &amp;rsquo;&amp;rsquo; and c = &amp;lsquo;&amp;rsquo;（全都命中索引）&lt;/p>
&lt;p>c = &amp;rsquo;&amp;rsquo; and b = &amp;rsquo;&amp;rsquo; and a = &amp;lsquo;&amp;rsquo;（全都命中索引，有SQL优化器）&lt;em>&lt;strong>[连接器、查询缓存、分析器、优化器、执行器]&lt;/strong>&lt;/em>&lt;/p>
&lt;p>a = &amp;rsquo;&amp;rsquo; and c = &amp;lsquo;&amp;rsquo;（只有a命中，因为b没有，联合索引中间索引无）&lt;/p>
&lt;p>a = &amp;rsquo;&amp;rsquo; and b &amp;gt; &amp;rsquo;&amp;rsquo; and c = &amp;lsquo;&amp;rsquo;（只有a和b命中，因为b时一个范围值，算是断点）&lt;/p>
&lt;p>如果联合索引中有主键a&lt;/p>
&lt;p>b = &amp;rsquo;&amp;rsquo; and a = &amp;rsquo;&amp;rsquo; （只会走主键a，因为B+树索引结构）&lt;/p>
&lt;hr>
&lt;h4 id="where和order-by-索引字段">Where和Order by 索引字段&lt;/h4>
&lt;p>使用联合索引idx（a,b）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">可以走索引&lt;/span>idx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">where&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xx&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">order&lt;/span> &lt;span style="color:#66d9ef">by&lt;/span> b
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Mysql的order by 会根据创建联合索引顺序进行排序 且asc&lt;/p>
&lt;p>&lt;a href="https://stackoverflow.com/questions/9641463/mysql-not-using-index-for-order-by/38071094">https://stackoverflow.com/questions/9641463/mysql-not-using-index-for-order-by/38071094&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="redis">Redis&lt;/h3>
&lt;h4 id="redis的五大基本类型">Redis的五大基本类型？&lt;/h4>
&lt;ul>
&lt;li>String&lt;/li>
&lt;li>List&lt;/li>
&lt;li>Set&lt;/li>
&lt;li>SortSet&lt;/li>
&lt;li>Hash&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="sortset底层数据结构是怎么存储的">SortSet底层数据结构是怎么存储的？&lt;/h4>
&lt;p>有两种数据结构：&lt;strong>压缩表ziplist和跳表skiplist&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>压缩表（如果有序保存元素数&amp;lt;128 || 长度&amp;lt;64byte）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>skiplist按序保存元素分值，使用dict来保存分值和元素的对应关系（有序链表 + 多级索引结构（关键节点））&lt;/p>
&lt;p>时间复杂度：O(logN) 空间复杂度：O(N)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>跳表插入数据&lt;/strong>&lt;/p>
&lt;p>1.新节点和各层索引节点逐一比较，确定原链表的插入位置。O（logN）&lt;/p>
&lt;p>2.把索引插入到原链表。O（1）&lt;/p>
&lt;p>3.利用抛硬币的随机方式，决定新节点是否提升为上一级索引。&lt;/p>
&lt;p>结果为“正”则提升并继续抛硬币，结果为“负”则停止。O（logN）&lt;/p>
&lt;p>总体上，跳跃表插入操作的时间复杂度是O（logN），而这种数据结构所占空间是2N，既空间复杂度是 O（N）。&lt;/p>
&lt;p>&lt;strong>跳表删除数据&lt;/strong>&lt;/p>
&lt;p>1.自上而下，查找第一次出现节点的索引，并逐层找到每一层对应的节点 O(logN)&lt;/p>
&lt;p>2.删除每一层查找到的节点，如果该层只有一个节点，删除整一层（除去原链表之外）O(logN)&lt;/p>
&lt;p>总体来说，删除O(logN)&lt;/p>
&lt;hr>
&lt;h4 id="如何解决redis存储string类型大的json数据格式的问题">如何解决Redis存储String类型大的JSON数据格式的问题？&lt;/h4>
&lt;p>可以使用中间件，对大的JSON字符串格式数据进行压缩&lt;/p>
&lt;hr>
&lt;h4 id="redis的过期时间是怎么实现的">Redis的过期时间是怎么实现的？&lt;/h4>
&lt;p>RedisDB中有Expires字典保存DB中所有key的过期时间（过期字典）&lt;/p>
&lt;p>键是一个指针指向数据库键&lt;/p>
&lt;p>值是一个long类型的毫秒unix时间戳&lt;/p>
&lt;p>判断key -&amp;gt; 找过期字典 -&amp;gt; 判断现在unix时间戳是否大于key的value&lt;/p>
&lt;hr>
&lt;h4 id="redis的过期键删除策略有哪些三种分别是怎样优缺点">Redis的过期键删除策略有哪些（三种）分别是怎样，优缺点&lt;/h4>
&lt;p>定时删除：key一旦到达过期时间，立马删除&lt;/p>
&lt;p>惰性删除：当getKey的时候，发现已到过期时间就删除返回nil&lt;/p>
&lt;p>定期删除：每隔一段时间，扫描过期key，进行删除&lt;/p>
&lt;p>定时删除：对内存友好，但对CPU时间不友好[降低服务器吞吐量和响应时间]&lt;/p>
&lt;p>惰性删除：对内存不友好，大量过期的key放在DB中一直不被删除&lt;/p>
&lt;p>定期删除：前两者折中方式，每隔一段时间执行删除过期key操作，限制删除key执行时长和频率&lt;/p>
&lt;p>惰性删除：通过读写DB之前执行expireIfNeeded函数对输入key检查（过滤器）&lt;/p>
&lt;p>定期删除：调用activeExpireCycle函数 在规定时间内分多次遍历服务器中各个数据库，从数据库Expires字典中随机检查一部分键的过期时间，过期则删除。&lt;/p>
&lt;hr>
&lt;h4 id="redis的持久化机制会有哪些两种分别是怎样的优缺点">Redis的持久化机制会有哪些（两种）分别是怎样的，优缺点&lt;/h4>
&lt;p>RDB：对数据生成快照方式，保存键值对记录数据库，存储二进制的RDB文件（可设置每隔一段时间进行save）&lt;/p>
&lt;p>AOF：保存对Redis执行写的操作命令，通过追加append方式添加命令&lt;/p>
&lt;p>AOP可以设置同步参数，一秒同步，redis宕机最多丢失一秒前数据&lt;/p>
&lt;p>如果需要对大规模数据进行恢复，对于数据完整性不是非常敏感，RDB对AOF更加高效&lt;/p>
&lt;p>对数据量较大的进行RDB持久化，没法做到秒级来save/bgsave&lt;/p>
&lt;p>反之，对数据完整性敏感性十足，使用AOF，做到最多丢失一秒之前的redis数据&lt;/p>
&lt;hr>
&lt;h4 id="aof重写是怎样的">AOF重写是怎样的？&lt;/h4>
&lt;p>Redis通过创建一个新的AOF文件来替换现在的AOF文件（新旧文件保存DB状态相同）&lt;/p>
&lt;p>不读取现有的AOF文件，而直接读取服务器当前DB的键现在的值，然后用一条命令记录 代替之前多条命令&lt;/p>
&lt;p>首先从数据库中读取键现在的值，然后用一条命令去记录键值对，代替之前记录这个键值对的多条命令，这就是AOF重写功能的实现原理。&lt;/p>
&lt;p>&lt;strong>为了不影响处理其他命令请求，将AOF重写交给子进程（带有Master进程的副本，避免使用锁，保证数据安全）&lt;/strong>&lt;/p>
&lt;hr>
&lt;h4 id="aof重写期间服务器进行命令处理导致数据不一致怎么办">AOF重写期间服务器进行命令处理，导致数据不一致怎么办？&lt;/h4>
&lt;p>Redis创建一个AOF重写缓冲区，在创建子进程后使用&lt;/p>
&lt;p>AOF重写期间，服务器进程工作：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>执行客户端命令&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将执行后命令追加AOF缓冲区&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将执行命令追加AOF重写缓冲区&lt;/p>
&lt;p>当子进程完成AOF重写后，向父进程发信号，父进程接收到将AOF重写缓冲区中所有内容写入新AOF文件中&lt;/p>
&lt;p>再进行新的AOF改名 原子性覆盖现有的AOF文件，完成替换&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h4 id="aofrdb和复制功能对过期键的处理">AOF、RDB和复制功能对过期键的处理？&lt;/h4>
&lt;h5 id="rdb">RDB&lt;/h5>
&lt;ul>
&lt;li>
&lt;p>生成RDB文件：创建RDB文件，对数据库中key检查，会忽略过期键，只保存有用的key&lt;/p>
&lt;/li>
&lt;li>
&lt;p>载入RDB文件：（但主从服务器进行RDB文件载入，主会忽略，从会加载已过期key进去）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h5 id="aof">AOF&lt;/h5>
&lt;ul>
&lt;li>
&lt;p>AOF文件写入：AOF会追加append 该key被删除的del命令到AOF文件中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>AOF重写：和生成RDB文件一样，对DB中key检查，已过期的不会保存&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="为什么redis支持高并发量速度快">为什么Redis支持高并发量，速度快？&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>Redis是内存型DB，直接对内存读写速度快&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Redis使用io多路复用，可以处理并发请求，采用epoll单线程轮询多个socket方式，处理事件。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>（非阻塞io采用epoll，读、写、关闭、连接转化成事件，减少io时间）&lt;/p>
&lt;ol start="3">
&lt;li>Redis是单线程的，io多路处理的需要执行命令放在队列当中，单线程逐个执行，保证不会同时执行&lt;/li>
&lt;/ol>
&lt;p>避免产生多线程上下文切换，或者产生死锁等，性能消耗&lt;/p>
&lt;ol start="4">
&lt;li>
&lt;p>Redis底层数据结构，压缩表、跳表、hash..高效的存取数据结构&lt;/p>
&lt;/li>
&lt;li>
&lt;p>采用io多路复用，监听多个客户端socket，将socket事件放在队列当中，单线程处理&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>再交给文件事件分配器处理，分给不同的事件处理器进行处理（set、get、连接请求等处理）&lt;/p>
&lt;hr>
&lt;h4 id="select和epoll的区别阻塞io-非阻塞io-io多路复用-异步io分别">select和epoll的区别？阻塞io 非阻塞io io多路复用 异步io分别？&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>select、poll用监视多个socket描述符，单线程轮询来判断数据是否就绪，就绪返回信号。还需要再一下轮询找到确定socket进行处理，而是epoll会把轮询已就绪的socket事件放在自己创建的链表中，epoll只关心链表有无数据就可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>epoll不需要通过遍历的方式，而是在内核中建立了file节点，并且通过注册响应事件的方式，当有响应事件发生时采取相应的措施，并把准备就绪的事件放入链表中，从而epoll只关心链表中是否有数据即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>epoll只需要一次拷贝就可以 其他select需要每次遍历过后在用户态-内核态中相互拷贝&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h4 id="redis分片有了解吗">Redis分片有了解吗?&lt;/h4>
&lt;p>&lt;a href="https://developer.aliyun.com/article/692428">https://developer.aliyun.com/article/692428&lt;/a>&lt;/p>
&lt;hr>
&lt;h4 id="redis主从复制">Redis主从复制？&lt;/h4>
&lt;p>&lt;a href="https://www.cnblogs.com/kismetv/p/9236731.html">https://www.cnblogs.com/kismetv/p/9236731.html&lt;/a>&lt;/p>
&lt;hr>
&lt;h4 id="redis的高可用是怎么实现的">Redis的高可用是怎么实现的？&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>Redis提供持久化机制、主从复制（读写分离）、集群+哨兵&lt;/p>
&lt;/li>
&lt;li>
&lt;p>持久化：针对于单机备份（从内存到磁盘）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>主从复制：侧重在于多机的数据备份，实现读写分离、读的负载均衡和故障恢复&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>从节点保存主节点（masterhost和masterip）存储主节点的ip和port信息&lt;/p>
&lt;p>从节点会每秒调用定时函数replicationCron，发现主节点可以连接那就进行socket连接&lt;/p>
&lt;p>从节点建立事件收集器，比如接收RDB文件、接收命令&lt;/p>
&lt;p>&lt;strong>集群+哨兵：&lt;/strong>&lt;/p>
&lt;p>在复制基础上，哨兵解决自动化的故障恢复&lt;/p>
&lt;ul>
&lt;li>
&lt;p>哨兵监控：不断检查主节点和从节点是否运行正常&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动故障转移：当主节点不可用，升级其中一个从节点为主节点，其他从节点修改复制目标节点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置提供者：客户端连接时通过连接哨兵，拿到当前redis主节点的地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通知：哨兵会将故障转移的结果通知客户端&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>集群：通过集群，Redis解决了写操作无法负载均衡，以及存储能力受到单机限制的问题，实现了较为完善的高可用方案。&lt;/p>
&lt;hr>
&lt;h4 id="redis的内存淘汰策略有哪些">Redis的内存淘汰策略有哪些？&lt;/h4>
&lt;p>已设置过期时间的数据集 LRU数据淘汰&lt;/p>
&lt;p>已设置过期时间的数据集 即将过期的数据淘汰&lt;/p>
&lt;p>已设置过期时间的数据集 选择任意数据淘汰&lt;/p>
&lt;p>全局数据集keys LRU最近最少使用key淘汰&lt;/p>
&lt;p>全局数据集 任意选择数据淘汰&lt;/p>
&lt;p>禁止驱逐数据（满了存新的数据 直接报错）&lt;/p>
&lt;hr>
&lt;h4 id="redis中会出现哪些问题雪崩击穿穿透">Redis中会出现哪些问题？（雪崩、击穿、穿透）&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>雪崩：keys的过期时间设置随机数值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>击穿（缓存 db都没有的数据）：缓存空对象设置较短的过期时间（五分钟），或者使用bitmap设置布隆过滤器&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>（一定不存在的数据请求会直接过滤 无法打到db）&lt;/p>
&lt;ol start="3">
&lt;li>穿透（热点数据缓存过期）：互斥锁，只要有一个请求访问来DB带来新的缓存，再释放锁&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="消息队列">消息队列&lt;/h3>
&lt;h4 id="rocketmq的实现原理是怎样">RocketMQ的实现原理是怎样？&lt;/h4>
&lt;p>RocketMQ由NameServer提供服务注册、Product生产者、Consumer消费者、Broker（RocketMQ进程）&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Broker在启动时，向所有的NameServe注册，并保持长连接，每30s发送心跳&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Product发送消息时，先从NameServer上获取Broker服务器地址，然后根据负载均衡算法选择一台服务器&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>来发送消息&lt;/p>
&lt;ol start="3">
&lt;li>Consumer消费消息时，从NameServer上获取Broker地址，然后主动拉取消息&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h4 id="rocketmq怎么实现这么高的吞吐量的高可用">RocketMQ怎么实现这么高的吞吐量的（高可用）？&lt;/h4>
&lt;p>RocketMQ分Product、Consumer、Broker、Name Server&lt;/p>
&lt;ol>
&lt;li>
&lt;p>都是以集群的方式部署（可以支持多master 模式、多master多slave异步复制模式、多 master多slave同步双写模式）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持10亿级别的消息堆积，不会因为堆积导致性能下降&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持海量的topic&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h4 id="rocketmq怎么保证消息不丢失">RocketMQ怎么保证消息不丢失？&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>producer端
采用同步发送消息，回调获得发送结果是否success&lt;/p>
&lt;p>发送失败，会发送重试（三次）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>broker端&lt;/p>
&lt;p>设置同步刷盘（默认是异步刷盘）持久化采用CommitLog来落盘&lt;/p>
&lt;p>集群部署，主从模式，高可用（万一master挂，使用slave继续转发[master接受到消息会同步slave]）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>consumer端&lt;/p>
&lt;p>at least once消息消费会发ack确认给broker&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h4 id="rocketmq的消费信息是以什么样的形式进行存储">RocketMQ的消费信息是以什么样的形式进行存储？&lt;/h4>
&lt;p>ByteBuffer msgStoreItemMemory&lt;/p>
&lt;p>[存储编码后的消息，即将消息转换成字节的方式&lt;/p>
&lt;p>和对象的序列化不同，不仅仅有消息体内容，还加上额外信息（消息创建时间、消息生产者的host、消息体的长度、topic&amp;hellip;）]&lt;/p>
&lt;p>（需要查看源码确认）&lt;/p>
&lt;hr>
&lt;h4 id="rocketmq怎么保证消息不重复消费">RocketMQ怎么保证消息不重复消费？&lt;/h4>
&lt;p>生产者没必要做幂等性&lt;/p>
&lt;p>消费者端做好幂等性，确保重复的请求不会造成影响。&lt;/p>
&lt;p>比如：判断DB是否消费，在数据库使用唯一索引，保证消息只被消费一次。&lt;/p>
&lt;ol>
&lt;li>消费端处理消息的业务逻辑保持幂等性&lt;/li>
&lt;li>保证每条消息都有唯一编号且保证消息处理成功和去重表的日志同时出现&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h4 id="rocketmq怎么保证消息的有序性顺序消费">RocketMQ怎么保证消息的有序性（顺序消费）？&lt;/h4>
&lt;p>同一topic，同一个queue，发消息的时候一个线程去发送消息，消费的时候 一个线程去消费一个queue里的消息&lt;/p>
&lt;blockquote>
&lt;p>2021.11补充：&lt;/p>
&lt;/blockquote>
&lt;h5 id="消费者的消费queue和协程关系是怎么的一对一还是多无序和有序消费区别是什么">消费者的消费queue和协程关系是怎么的？一对一还是多？无序和有序消费区别是什么？&lt;/h5>
&lt;p>顺序消费是每个queue分配一个协程去处理，比如workerA从queue1中拉取，会放在buffer中&lt;/p>
&lt;ul>
&lt;li>
&lt;p>虽然是messageBuffer数组，但无序对应是一个同一个messageChan（存放message）&lt;/p>
&lt;p>无序：每个协程对应是同一个messageBuffer&lt;/p>
&lt;p>有序：每个协程对应不同的messageBuffer&lt;/p>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称\比例&lt;/th>
&lt;th>消息queue&lt;/th>
&lt;th>messageBuffer&lt;/th>
&lt;th>协程worker&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>无序disOrderly&lt;/td>
&lt;td>n&lt;/td>
&lt;td>1&lt;/td>
&lt;td>n&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>有序orderly&lt;/td>
&lt;td>n&lt;/td>
&lt;td>n&lt;/td>
&lt;td>n&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h5 id="多个协程怎么分配到对应的message进行获取对应消息进行消费">多个协程怎么分配到对应的message，进行获取对应消息进行消费？&lt;/h5>
&lt;p>无论无序消费还是有序消费，都是从协程分配的messageBuffer从获取message进行处理&lt;/p>
&lt;ul>
&lt;li>不同之处：
&lt;ol>
&lt;li>无序，就算消费组重启需要变更，rebalance，需要给多个queue（消息）重新分配对应的协程，但多个协程对应还是同一个buffer，消息继续发，可能其他协程停了，但其他协程继续直接拿来就消费。&lt;/li>
&lt;li>有序，则多个协程序对应多个buffer，可能有协程停了，对应的buffer channel没法消费，持续积压，只有rebalance完分配了新协程就可以继续消费，消费速度降低，会导致积压上升。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h5 id="同个comsumer对应多个协程从自己对应的messagebuffer获取message消费是跟拿取的一样并发消费的吗-有序无序">同个comsumer对应多个协程从自己对应的messageBuffer获取message消费，是跟拿取的一样并发消费的吗 （有序无序）？&lt;/h5>
&lt;ul>
&lt;li>源码中，并发的开多协程从buffer获取消息，然后各个协程消费buffer channel，说明协程也是并发消费消息，消息分发到各个协程当中，互不影响一起消费。&lt;/li>
&lt;li>感觉看作每个协程消费也是一个队列，多个队列并发消费。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h5 id="有序如何设置无限重试的设置retrytime控制次数可不可以">有序如何设置无限重试的？设置retryTime控制次数可不可以？&lt;/h5>
&lt;p>可以（两个条件是或者的关系）&lt;/p>
&lt;hr>
&lt;p>一个topic下有多个队列，为了保证有序，RocketMQ提供了MessageQueueSelector队列选择机制&lt;/p>
&lt;p>我们可使用Hash取模法，让同一个订单发送到同一个队列中，再使用同步发送，只有同个订单的创建消息发送成功，再发送支付消息。这样，我们保证了发送有序。&lt;strong>【在同个队列中消息是有序】&lt;/strong>&lt;/p>
&lt;hr>
&lt;p>RocketMQ仅保证顺序发送，顺序消费由消费者业务保证!!!（消费端幂等性）&lt;/p>
&lt;p>生产者顺序发送，消费者顺序消费setOrderly = true&lt;/p>
&lt;hr>
&lt;h3 id="计算机网络">计算机网络&lt;/h3>
&lt;h4 id="osi七层模型">OSI七层模型&lt;/h4>
&lt;p>应用层 表示层 会话层 传输层 网络层 数据链路层 物理层&lt;/p>
&lt;hr>
&lt;h4 id="tcpip四层体系模型">TCP/IP四层体系模型？&lt;/h4>
&lt;p>应用层、传输层、网际层、网络接口层&lt;/p>
&lt;hr>
&lt;h4 id="tcpip参考模型与osi七层模型有什么异同">TCP/IP（参考）模型与OSI七层模型有什么异同？&lt;/h4>
&lt;p>OSI七层模型是站在完整、宏观纬度上计算机网络分层&lt;/p>
&lt;p>TCP/IP四层模型是围绕TCP/IP网络中通信协议来进行分层&lt;/p>
&lt;hr>
&lt;h4 id="http基本组成">HTTP基本组成？&lt;/h4>
&lt;p>header + body&lt;/p>
&lt;h4 id="http常见字段有哪些">HTTP常见字段有哪些？&lt;/h4>
&lt;p>Host字段（服务器域名）&lt;/p>
&lt;p>Content-length（服务端返回的数据长度）&lt;/p>
&lt;p>Content-type（服务端回应，告诉客户端这次数据是什么格式，text/html; charset=utf-8）&lt;/p>
&lt;p>Content-Encoding：gzip（服务端返回数据是什么压缩格式）&lt;/p>
&lt;p>Connection（客户端要求服务器TCP持久连接，请求复用keep-alive）&lt;/p>
&lt;hr>
&lt;h4 id="http常见的状态码有哪些">HTTP常见的状态码有哪些？&lt;/h4>
&lt;p>200 请求ok&lt;/p>
&lt;p>301 永久重定向&lt;/p>
&lt;p>302 临时重定向&lt;/p>
&lt;p>400 bad request 客户端请求报文有误&lt;/p>
&lt;p>404 not found客户端请求资源服务端不存在&lt;/p>
&lt;p>403 forbidden 客户端无权限访问资源&lt;/p>
&lt;p>500 内部服务器错误&lt;/p>
&lt;p>502 bad gatway 服务端作为网关或者代理时返回错误码&lt;/p>
&lt;p>503 服务器忙，无法回应&lt;/p>
&lt;hr>
&lt;h4 id="301-302状态码的区别">301 302状态码的区别？&lt;/h4>
&lt;p>301永久重定向&lt;/p>
&lt;p>302临时重定向&lt;/p>
&lt;hr>
&lt;h4 id="http有哪些请求操作分别">HTTP有哪些请求操作？分别&lt;/h4>
&lt;p>get、post、put、delete、head、options、patch&lt;/p>
&lt;p>Get和Post区别&lt;/p>
&lt;p>HTTP哪些请求是安全和幂等的？&lt;/p>
&lt;p>get head options&lt;/p>
&lt;h4 id="http的优缺点分别是">HTTP的优缺点分别是？&lt;/h4>
&lt;p>明文传输（易窃听）&lt;/p>
&lt;p>无法验证通信双方的身份（易伪装）&lt;/p>
&lt;p>无法证明报文的完整性（易篡改）&lt;/p>
&lt;h4 id="为什么http是无状态的">为什么HTTP是无状态的？&lt;/h4>
&lt;p>使用无状态的，应对大量的请求只需要来了服务端接收请求，处理完断开连接。&lt;/p>
&lt;p>减轻服务端设计，不然每个访问网站的用户，服务器都要保存他们信息，是服务器负担&lt;/p>
&lt;p>cookie和session？&lt;/p>
&lt;p>HTTP和HTTPS有什么区别？&lt;/p>
&lt;p>什么是对称加密/非对称加密？&lt;/p>
&lt;p>HTTPS怎么加密的(混合加密)？&lt;/p>
&lt;p>TCP的三次握手、四次挥手过程是怎样？&lt;/p>
&lt;hr>
&lt;h4 id="为什么说tcp是可靠的超时重传">为什么说TCP是可靠的？（超时重传）&lt;/h4>
&lt;p>TCP的流量控制、拥塞控制是怎样实现？（丢包）&lt;/p>
&lt;p>（慢开始、拥塞避免、快重传、快恢复）&lt;/p>
&lt;p>发送方维护一个拥塞窗口（cwnd）状态变量&lt;/p>
&lt;p>慢开始：发送的报文数令cwnd=1，发送方只能发送一个报文段；当收到确认后，将cwnd加倍&lt;/p>
&lt;p>2、4、8、16&amp;hellip;.（报文段数量）&lt;/p>
&lt;p>拥塞避免：设置了（阈值）ssthresh，当cwnd &amp;gt;= ssthresh，进入拥塞避免，每轮只将cwnd + 1&lt;/p>
&lt;p>超时情况：如果出现了超时，将ssthresh = cwnd/2，重新执行 -&amp;gt; 慢启动&lt;/p>
&lt;p>快重传：接收方每次接收到报文段，都会对最后一个有序报文段进行确认。ex：已收到M1、M2、现在接收到M4，&lt;/p>
&lt;p>应当对M2进行确认。发送方接收到&lt;strong>三次重复&lt;/strong>的确认，就知道下一个报文段丢失，立即快重传M3&lt;/p>
&lt;p>属于个别报文段丢失，执行快恢复，ssthresh = cwnd/2，cwnd = ssthresh，直接进入拥塞避免&lt;/p>
&lt;h5 id="tcp和udp的区别">TCP和UDP的区别？&lt;/h5>
&lt;p>使用TCP、UDP的例子？&lt;/p>
&lt;p>什么是ARP协议&lt;/p>
&lt;p>什么是ICMP协议&lt;/p>
&lt;p>什么是DNS&lt;/p>
&lt;p>什么DHCP&lt;/p>
&lt;hr>
&lt;h3 id="海量数据场景问题">海量数据场景问题&lt;/h3>
&lt;p>bitMap&lt;/p>
&lt;p>使用最小堆&lt;/p>
&lt;p>spring三级缓存&lt;/p>
&lt;p>cms和g1垃圾收集器&lt;/p>
&lt;hr>
&lt;h3 id="操作系统">操作系统&lt;/h3>
&lt;h4 id="进程的几种状态">进程的几种状态&lt;/h4>
&lt;p>&lt;a href="https://www.jianshu.com/p/ac9ce2afd126">https://www.jianshu.com/p/ac9ce2afd126&lt;/a>&lt;/p>
&lt;p>就绪、进行、阻塞&lt;/p>
&lt;h4 id="线程的几种状态">线程的几种状态&lt;/h4>
&lt;p>&lt;a href="https://blog.csdn.net/pange1991/article/details/53860651">https://blog.csdn.net/pange1991/article/details/53860651&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1306580742045730">https://www.liaoxuefeng.com/wiki/1252599548343744/1306580742045730&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>New：新创建的线程，尚未执行；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Runnable：运行中的线程，正在执行&lt;code>run()&lt;/code>方法的Java代码；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Blocked：运行中的线程，因为某些操作被阻塞而挂起；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Waiting：运行中的线程，因为某些操作在等待中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Timed Waiting：运行中的线程，因为执行&lt;code>sleep()&lt;/code>方法正在计时等待；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Terminated：线程已终止，因为&lt;code>run()&lt;/code>方法执行完毕。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="输入url到返回数据有用到哪些协议">输入url到返回数据有用到哪些协议？&lt;/h4>
&lt;p>DNS协议、TCP协议、IP协议、ARP协议、HTTP协议&lt;/p>
&lt;h5 id="过程">过程？&lt;/h5>
&lt;blockquote>
&lt;p>DNS解析、TCP连接、发送HTTP请求、服务端处理请求返回HTTP报文、浏览器解析渲染、连接结束&lt;/p>
&lt;/blockquote>
&lt;h5 id="mysql-explain-各字段解释">Mysql explain 各字段解释&lt;/h5>
&lt;blockquote>
&lt;p>&lt;a href="https://juejin.cn/post/6850418120998256654">https://juejin.cn/post/6850418120998256654&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/argleary/article/details/104189850">https://blog.csdn.net/argleary/article/details/104189850&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h3 id="线程池">线程池&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>有哪些参数？怎么设置？工作机制？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>拒绝策略有哪些？&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>核心线程数、最大线程数、空闲时间存活时间、存活时间单位unit、阻塞队列、拒绝策略&lt;/p>
&lt;p>拒绝策略：静默丢弃、直接抛异常、交给调用方处理、丢弃队伍中最老的任务&lt;/p>
&lt;/blockquote></description></item><item><title>Java基础知识点归纳</title><link>https://hi-ernest.github.io/blog/java-basic-knowledge-points/</link><pubDate>Fri, 02 Apr 2021 20:56:09 +0800</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/java-basic-knowledge-points/</guid><description>&lt;h3 id="面向对象">面向对象&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>怎么理解什么是面向对象？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>怎么理解Java中封装、继承、多态？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为什么需要接口？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接口和抽象类的区别？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Object有哪些方法？9个&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Object中hashcode是干什么？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Collection集合容器迭代器Itertor是什么？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>“==”和equals区别？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>hashcode和equals有什么联系&lt;/p>
&lt;/li>
&lt;li>
&lt;p>浅拷贝和深拷贝是什么 区别？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Java反射？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Java异常有哪些？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Java的error有哪些？&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="java有哪些容器每个容器底层需要理解掌握--应用场景">Java有哪些容器？（每个容器底层需要理解掌握 + 应用场景）&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>HashMap底层是怎样的？ jdk1.7和1.8有什么区别&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HashMap怎么扩容的？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HashMap在扩容的时候插入元素会怎样？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为什么HashMap在多线程下会出现线程安全问题-死循环？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ConcurrentHashMap怎么实现线程安全的？ jdk1.7和1.8&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LinkedHashMap底层是怎样的，怎么实现有序插入？&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="进程和线程的区别ps协程是什么">进程和线程的区别？ps：协程是什么&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>进程的通信方式有哪些？哪个比较高效，为什么？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>线程的通信方式有哪些？（线程通信指的是线程互斥同步）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>线程有哪些状态？每个状态具体操作是？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何创建线程？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>继承Thread和实现Runnable区别&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实现Runnable和Callable有什么区别&lt;/p>
&lt;/li>
&lt;li>
&lt;p>线程池有哪些？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>线程池有哪些参数，每个代表什么？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>线程池的拒绝策略有哪些？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>线程池工作机制，每一步是怎样的？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有哪些阻塞队列？分别作用？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CyclicBarrier、CountDownLatch、Semaphore 的用法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>start和run的区别？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>wait和sleep的区别？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何解决多线程并发问题？加锁有哪些？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>synchronized 和 ReentrantLock的区别&lt;/p>
&lt;/li>
&lt;li>
&lt;p>什么是CAS、AQS 应用场景有哪里？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CountDownLatch是什么？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ThreadLocal是什么？（线程本地变量/存储）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Java内存模型是怎样的？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Volatile是解决什么问题？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Volatile和Synchronized区别&lt;/p>
&lt;/li>
&lt;li>
&lt;p>synchronized怎么优化加锁过程？锁升级、锁消除过程&lt;/p>
&lt;/li>
&lt;li>
&lt;p>什么是AQS？（AbstractQueuedSynchronizer）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>什么是乐观锁、悲观锁？&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="java虚拟机">Java虚拟机&lt;/h3>
&lt;ul>
&lt;li>运行时数据区域&amp;lt;图&amp;gt; 各个区域分别的指责是什么？&lt;/li>
&lt;li>垃圾回收？在哪些区域GC？&lt;/li>
&lt;li>如何判断一个对象是否可回收？&lt;/li>
&lt;li>GCRoot包含哪些内容？&lt;/li>
&lt;li>方法区的回收有哪些对象&lt;/li>
&lt;li>垃圾回收算法有哪些？分别是怎样GC过程？ 分代收集算法指的是？&lt;/li>
&lt;li>垃圾收集器有哪些？ 重点CMS和G1收集器（concurrent mark sweep）&lt;/li>
&lt;li>回收策略：什么时候会发生YoungGC / FullGC（场景）（考虑Eden、Survivor）&lt;/li>
&lt;li>什么时候会发生FullGC？(Concurrent Mode Failure)（具体使用场景会是怎样会）&lt;/li>
&lt;li>内存分配策略有哪些？对象分配优先在哪？如果是大对象尼？&lt;/li>
&lt;li>是不是一收集完就开始GC？为什么&lt;/li>
&lt;li>类加载机制是怎样？每个步骤分别指责是？&lt;/li>
&lt;li>类加载器有哪些？（三种）&lt;/li>
&lt;li>什么是双亲委派模型？作用是什么？(可以加上自定义类加载器extends ClassLoader 重写findClass方法)（ClassNotFoundException）&lt;/li>
&lt;li>什么NIO&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="spring">Spring&lt;/h3>
&lt;ul>
&lt;li>Spring和SpringBoot的区别&lt;/li>
&lt;li>Spring的IOC 和 AOP&lt;/li>
&lt;li>依赖注入DI有哪些&lt;/li>
&lt;li>Spring的实现事务的方式有哪些&lt;/li>
&lt;li>Spring的事务传播级别有哪些&lt;/li>
&lt;li>Spring的事务隔离级别有哪些&lt;/li>
&lt;li>@Autowird怎么注入（类型 名称）&lt;/li>
&lt;li>Spring中有哪些设计模式？分别有哪些&lt;/li>
&lt;li>Spring的单例模式是严格的单例模式吗？为什么&lt;/li>
&lt;li>有哪些方法可以实现单例模式？&lt;/li>
&lt;li>Spring的三级缓存了解吗&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="数据库">数据库&lt;/h3>
&lt;ul>
&lt;li>数据库的事务特性？（四个）&lt;/li>
&lt;li>事务并发一致性问题有哪些？分别过程是怎样？（丢失修改）&lt;/li>
&lt;li>怎么分别解决并发一致性问题？&lt;/li>
&lt;li>事务隔离级别有哪些？&lt;/li>
&lt;li>什么是MVCC？怎么解决并发一致性问题&lt;/li>
&lt;li>MVCC解决了哪两种隔离级别？&lt;/li>
&lt;li>undo日志用来干嘛？biglog日志？redo日志？&lt;/li>
&lt;li>如何解决幻读问题？（在X隔离级别使用XX和XX）&lt;/li>
&lt;li>Net-Key Lock包含什么？&lt;/li>
&lt;li>快照读和当前读的区别？&lt;/li>
&lt;li>数据库三范式指的哪些？&lt;/li>
&lt;li>select where group by having&lt;/li>
&lt;li>inner join left join right join&lt;/li>
&lt;li>between order by 顺序&lt;/li>
&lt;li>SQL优化有哪些？（结构优化 + 查询优化）&lt;/li>
&lt;li>MySQL主从复制怎样实现？&lt;/li>
&lt;li>为什么读写分离？&lt;/li>
&lt;li>为什么需要分库分表？&lt;/li>
&lt;li>怎样分库分表？&lt;/li>
&lt;li>行级锁和表级锁？（基于索引）&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="索引">索引&lt;/h3>
&lt;ul>
&lt;li>MySQL索引底层怎么实现的？&lt;/li>
&lt;li>为什么使用B+树而不是二叉搜索树或者红黑树？&lt;/li>
&lt;li>聚簇索引和非聚簇索引是什么？&lt;/li>
&lt;li>自适应哈希索引？&lt;/li>
&lt;li>联合索引？最左匹配原则？&lt;/li>
&lt;li>索引优化有哪些？（哪些情况下索引会失效？）&lt;/li>
&lt;li>索引的优点有哪些？&lt;/li>
&lt;li>索引使用条件，是不是越多越好？为什么&lt;/li>
&lt;li>查询性能优化方式有哪些？&lt;/li>
&lt;li>innoDB和MyISAM有什么区别？&lt;/li>
&lt;li>MySQL数据类型有哪些（tinyint、smallInt、mediumInt、int、bigInt）[8,16,24,32,64位]&lt;/li>
&lt;li>int（11）数字代表什么？&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="redis的五大基本类型">Redis的五大基本类型&lt;/h3>
&lt;ul>
&lt;li>键都是字符串，值是不同的对象类型&lt;/li>
&lt;li>Redis的过期键删除策略有哪些（三种）分别是怎样，优缺点&lt;/li>
&lt;li>Redis的持久化机制会有哪些（两种）分别是怎样的，优缺点&lt;/li>
&lt;li>如果一边执行持久化机制，一边执行过期删除策略，redis会是怎样的操作行为？&lt;/li>
&lt;li>Redis的AOF是怎样实现？&lt;/li>
&lt;li>AOF重写是怎样的？&lt;/li>
&lt;li>AOF重写期间服务器进行命令处理，导致数据不一致怎么办？&lt;/li>
&lt;li>为什么Redis支持高并发量，速度快？&lt;/li>
&lt;li>Redis单线程是指的是什么单线程?&lt;/li>
&lt;li>Redis分片有了解吗?&lt;/li>
&lt;li>Redis怎么实现主从复制？&lt;/li>
&lt;li>Redis的内存淘汰策略有哪些？&lt;/li>
&lt;li>Redis中会出现哪些问题？（雪崩、击穿、穿透）&lt;/li>
&lt;li>如何保证redis和DB数据一致性问题？https://dler.cloud/subscribe/C7CwhGaDo3h1s1hH?mu=ssr&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="rocketmq">RocketMQ&lt;/h3>
&lt;ul>
&lt;li>RocketMQ怎么实现这么高的吞吐量的？&lt;/li>
&lt;li>RocketMQ怎么保证消息不丢失？&lt;/li>
&lt;li>RocketMQ怎么保证消息不重复消费？&lt;/li>
&lt;li>RocketMQ怎么保证消息的有序性？&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="补充">补充&lt;/h3>
&lt;ul>
&lt;li>Java的序列化有哪些？&lt;/li>
&lt;li>关于spring的问题补充&lt;/li>
&lt;li>rocketMQ的问题补充&lt;/li>
&lt;li>mySQL的问题&lt;/li>
&lt;li>Redis的问题补充&lt;/li>
&lt;li>bitmap&lt;/li>
&lt;li>topK的问题&lt;/li>
&lt;li>场景设计题目补充&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="sql和算法">SQL和算法&lt;/h3></description></item><item><title>送你一朵小红花</title><link>https://hi-ernest.github.io/blog/%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1/</guid><description>&lt;p>有几点让我热泪盈眶，深被打动&lt;/p>
&lt;h2 id="未来的不确定性">未来的不确定性&lt;/h2>
&lt;p>你永远不知道下一秒会发生什么，灾难和惊喜哪一个会先降临在身上
面对残酷现实的无力感，让人沉闷压抑不适&amp;hellip;
所以其实本身活着就已经很难很难的事儿，电影探讨的韦一航、马小远这类患病人群，站在更高层面，其实我们每个人在社会都“小心翼翼”地活着，未来的不确定性时刻提醒着我们珍惜当下，就像韦一航母亲说的那样，珍惜每一分每一秒，我想这才是对现在、对未来我们最好的礼物。&lt;/p>
&lt;h2 id="温暖家庭亲情">温暖家庭亲情&lt;/h2>
&lt;p>是韦一航的温暖家庭亲情，家庭父母、姑姑叔叔、爷爷奶奶&amp;hellip;话语中都是鼓励，甚至打算就算卖房也要给航航治好病。不知道你有没有这样的感悟，在社会上，太多家庭成员因为鸡毛蒜皮小事、为利益化亲情而不顾，脸面不惜互相划破不可开交，实属狼狈和面目可憎。可能温暖家庭氛围已经在我心中牢牢割据一片洁净不可侵犯的区域，想到从小到大每次回老家，临走前爷爷奶奶总是那一句“要好好读书哟”，小时候满不在乎话不经脑子脱口应好，但随着时间流逝越长大越感到这句话背后的分量，是家人的期许，他们是如此真心希望你变的越来越好，我也明白“好好读书”这句话背后更深的意思，“你要好好生活照顾好自己，要好好努力让自己变得更好，成为想要成为的人”，每次想到此心中就会涌起暖流，久久不能平复。越长大越痛恨时间的无情，因为我们在长大而他们却在老去。&lt;/p>
&lt;h2 id="韦一航和马小远的感情">韦一航和马小远的感情&lt;/h2>
&lt;p>从陌生到熟悉，从友情到爱情，如果韦一航是一间狭窄不见天日的小黑屋，那马小远就是清晨的那第一缕阳光，透过天窗狠狠闯入小黑屋，让冰冷的黑屋逐渐温暖，变得可人起来。&lt;/p>
&lt;p>友情、爱情同食物一样对人们来说也必不可少，因为它们具有真诚、包容这些美好特质，所以它们显得珍贵，并我们沮丧无助、痛苦不安时它们支持着我们，跨过一个又一个坎。但我觉得更多时候还是独自一个人，你没有马小远，面对问题所产生的沮丧、抱怨、生气等等这些情绪，建议不必强压不用去埋怨自己要有情绪，因为每一种情绪的产生都有它的道理，正视情绪允许自己有情绪，合理的宣泄。再分析问题，寻找解决问题的方法，去尝试去解决，毕竟我们一生与自己相处时间是最多的，学会与自己对话，真正了解自己其实也是我们人生的必修课之一。&lt;/p>
&lt;h2 id="唯一吐槽一点">唯一吐槽一点&lt;/h2>
&lt;p>电影在爱情和亲情之间来回切换频率，会有一丢丢体验不良好，但也不影响这是一部好的电影，希望我们都可以好好活着，有价值的活着，好好生活，认真过好每一分每一秒，珍惜当下，珍惜你爱的人和爱你的人儿！&lt;/p></description></item><item><title>高效能人士的七个习惯</title><link>https://hi-ernest.github.io/blog/%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF/</link><pubDate>Sun, 10 Jan 2021 23:22:00 +0000</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF/</guid><description>&lt;p>&lt;strong>效能人士的七个习惯&lt;/strong>&lt;/p>
&lt;p>在所有进步的社会中爱都是代表动作，但消极被动的人却把爱当做种感觉。“好莱坞式的电影就常灌输这种不必为爱负责的观念.因为爱只是感觉，没有感觉，便没有爱。事实上，任由感觉左右行为是不负责任的做法。” 逆境会让人改变新的思维方式，创建全新思维或转换角度感受世界。
独立意志事第一：（时间管理理论）
以一周为单位，不要以首天因固定量来安排任务，每一天有不同的优先标的，但基本上7日一体，相互呼应。按照事情本身的重要安排事历。
重人性：日程表的目的在于帮助工作推行，并不是让我们为进度落后而产生内疚。
平衡： 提醒我们扮演不同的角色，以免忽略了健康、家庭、个人发展等重要的人生层面
强调以原则为重心，以良知为导向，针对个人独有的使命，帮助个人平衡发展生活中不同角色，并全盘规划日常生活。&lt;/p>
&lt;p>高效能的秘诀—授权（充分信任的授权=注重结果而不是过程，获权者自行决定如何完成务，并对结果负责。开始比较费时，但绝对值得。
阅读看书的最终反转换自己的理解并有所产出和产能，将书中知识运用在现实实践当中，再输出自己思想给他人获得认同感。
运用想象力来挖掘内心深处真正的感觉
心灵演练（想象与确认）：在身心放松的情况下，模拟各种可能出现的状况以及适当的反应，脑袋中影像愈清晰愈好。你的行为在潜移默化中逐渐转变，最后终于能控制情绪，冷静应变。&lt;/p>
&lt;p>每个人都有自己的使命宣言，我们是发现而非发明自己的人生使命，善用自己全部的大脑—“人的大脑可分为左右两部分，左脑主司逻辑思考与语言能力，右脑职掌创造力与直觉。左脑处理文字，右脑擅长图像；左脑重局部与分析，右脑重整体与整合。” 以原则为重心“虽千万人，吾往矣”&lt;/p>
&lt;p>“注重原则的人会保持冷静客观的态度，不受情绪或其他因素干扰。然后从整体的角度——包括工作需要、家庭需要、其他相关因素，以及不同的决定可能造成的结果——加以考虑，经过深思熟虑，才做出正确的抉择。”&lt;/p></description></item><item><title>2021/08/16有感</title><link>https://hi-ernest.github.io/blog/2020-08-16/</link><pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/2020-08-16/</guid><description>&lt;p>在周五时候，人更加的迷茫和不知所措，好像每次在不同的环境，阶段都会有疑惑和无力感。
昨天去跑步，时隔好多天的运动，在过程中我也在思考自己的现阶段到底顾虑什么，焦虑什么，那如何解决尼&lt;/p>
&lt;p>我想把这些东西列出：
工作上：工作的意义到底是什么？很多老套说为了赚更多的钱，给自己和家人过更好的生活，我想这毫无疑问，但是更多的钱，怎样才算多得多的钱，赚更多的钱挤压更少的时间吗，还是说拿命去换钱？&lt;/p>
&lt;p>如果不考虑买房子，买车子等身外之物，钱的够花就行，再搞点副业无论是公众号还是知识分享等，但这些是长期隐藏的财富积累，不能立马成效。赚钱还是去各地旅游，去开拓眼界，获取人生另一处不同的体验？我不知道怎样才是对的，也不想被现实早早按在地上摩擦摩擦，我还年轻，不要被房子被现实所困，现在就是提高自己竞争力，提升自己价值。（可能了解越多思维就越被捆紧，得不到延伸，告诉自己：只有机遇和实力并存时，才能顺其自然得到）
还有就是可能看到别人入职20+k，或者别人工作两三年后成果，对自己未来不确定性担忧，害怕自己无法达到自己所期望的自己。&lt;/p>
&lt;p>我想开心有效率的工作，能得到看得到自己的产出，而且并不是以消耗非上班时间和身体健康为前提的工作。
我也想赚很多钱，但我知道生活和金钱需要取舍的话，我一定选择生活；钱够用就可，钱我要分几部分
生活、理财、旅游
我要拥有健康积极心态，拥有健康的身体，身体和灵魂都要兼顾
工作上，技术和软素质都很重要，软素质包括与人沟通、做人等等
但是每个人都有自己的经历，不一样的成长阶段，没有谁就一定比谁好，人生是场马拉松&amp;hellip;..&lt;/p>
&lt;p>关键在于做好当下的事，现在都觉得难并解决不了，那怎么去更大的平台发展，更大的平台同样也意味更大的挑战和难题，所谓跳槽我觉得就像加入实验室一样，如果你在该场景该领域和技术等熟悉了掌握了，就可以去退出实验室，加入新的领域的实验室，拓展新的领域和技术，这就是走出自己的舒适圈，只有走出才能打开视野，丰富自身，不要一直待在自己的舒适圈里，不然容易废掉并失去价值和竞争力。&lt;/p>
&lt;p>（所以说自学能力太重要！！！）&lt;/p>
&lt;p>在工作一到两年，你的这些东西是否能带来竞争力上提升=到更大的平台上【可以看看jd】）&lt;/p>
&lt;p>现在我的方向：熟悉篮球领域模型，针对不同场景-不同功能，理解和掌握是如何调用的，为什么要这样调用
规范写成像诗一样优美的代码
熟悉微服务，学习springcloud在项目中应用，他是怎么管理和操作
熟悉Java8函数编程Stream、Map等
熟悉Java并发，框架和原理以及为什么
熟悉Redis，操作和原理机制
开展开源项目的学习Guan
学习Golang&lt;/p></description></item><item><title>Videos</title><link>https://hi-ernest.github.io/blog/videos/</link><pubDate>Wed, 25 Dec 2013 00:19:15 +0000</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/videos/</guid><description>&lt;p>This is a video test post.&lt;/p>
&lt;h2 id="youtube-privacy-enhanced-shortcode">YouTube Privacy Enhanced Shortcode&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/ZJthWmvUzzc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="twitter-simple-shortcode">Twitter Simple Shortcode&lt;/h2>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">Owl bet you&amp;#39;ll lose this staring contest 🦉 &lt;a href="https://t.co/eJh4f2zncC">pic.twitter.com/eJh4f2zncC&lt;/a>&lt;/p>&amp;mdash; San Diego Zoo Wildlife Alliance (@sandiegozoo) &lt;a href="https://twitter.com/sandiegozoo/status/1453110110599868418?ref_src=twsrc%5Etfw">October 26, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="vimeo-simple-shortcode">Vimeo Simple Shortcode&lt;/h2>
&lt;style>
.__h_video {
position: relative;
padding-bottom: 56.23%;
height: 0;
overflow: hidden;
width: 100%;
background: #000;
}
.__h_video img {
width: 100%;
height: auto;
color: #000;
}
.__h_video .play {
height: 72px;
width: 72px;
left: 50%;
top: 50%;
margin-left: -36px;
margin-top: -36px;
position: absolute;
cursor: pointer;
}
&lt;/style>
&lt;div class="s_video_simple __h_video">
&lt;a href="https://vimeo.com/4.8912912e&amp;#43;07" rel="noopener" target="_blank">
&lt;img src="https://i.vimeocdn.com/video/337401969-979f0cc9f55fdf305fb8984e90d92639ec9d7ecc4c9dfbc6536e28edb43784ce-d_640" srcset="https://i.vimeocdn.com/video/337401969-979f0cc9f55fdf305fb8984e90d92639ec9d7ecc4c9dfbc6536e28edb43784ce-d_640 1x, https://i.vimeocdn.com/video/337401969-979f0cc9f55fdf305fb8984e90d92639ec9d7ecc4c9dfbc6536e28edb43784ce-d_640 2x" alt="Sing Jan Swing - Kinetic Type">
&lt;div class="play">&lt;svg version="1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 61 61">&lt;circle cx="30.5" cy="30.5" r="30.5" opacity=".8" fill="#000">&lt;/circle>&lt;path d="M25.3 19.2c-2.1-1.2-3.8-.2-3.8 2.2v18.1c0 2.4 1.7 3.4 3.8 2.2l16.6-9.1c2.1-1.2 2.1-3.2 0-4.4l-16.6-9z" fill="#fff">&lt;/path>&lt;/svg>&lt;/div>&lt;/a>&lt;/div></description></item><item><title>sort algorithm</title><link>https://hi-ernest.github.io/blog/sort-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>chenhuarui2472071@gmail.com (Ernest Chen)</author><guid>https://hi-ernest.github.io/blog/sort-algorithm/</guid><description>&lt;p>排序算法是《数据结构与算法》中最基本的算法之一。
排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//快速排序
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">sort&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> nums&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> quickSort&lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> nums&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">quickSort&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> nums&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> left&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> right&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>left &lt;span style="color:#f92672">&amp;gt;=&lt;/span> right&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> partition &lt;span style="color:#f92672">=&lt;/span> getPartition&lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">,&lt;/span> left&lt;span style="color:#f92672">,&lt;/span> right&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> quickSort&lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">,&lt;/span> left&lt;span style="color:#f92672">,&lt;/span> partition &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> quickSort&lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">,&lt;/span> partition &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">,&lt;/span> right&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">getPartition&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> nums&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> left&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> right&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> left&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> sentry &lt;span style="color:#f92672">=&lt;/span> nums&lt;span style="color:#f92672">[&lt;/span>right&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> j &lt;span style="color:#f92672">=&lt;/span> left&lt;span style="color:#f92672">;&lt;/span> j &lt;span style="color:#f92672">&amp;lt;=&lt;/span> right &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">;&lt;/span> j&lt;span style="color:#f92672">++)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> sentry&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swap&lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">,&lt;/span> i&lt;span style="color:#f92672">,&lt;/span> j&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i&lt;span style="color:#f92672">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swap&lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">,&lt;/span> i&lt;span style="color:#f92672">,&lt;/span> right&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> i&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//归并排序
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#a6e22e">mergeKNums&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[][]&lt;/span> nums&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> mergeSort&lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> nums&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#a6e22e">mergeSort&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[][]&lt;/span> nums&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> left&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> right&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>left &lt;span style="color:#f92672">==&lt;/span> right&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> nums&lt;span style="color:#f92672">[&lt;/span>left&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> mid &lt;span style="color:#f92672">=&lt;/span> left &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">(&lt;/span>right &lt;span style="color:#f92672">-&lt;/span> left&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> nums1 &lt;span style="color:#f92672">=&lt;/span> mergeSort&lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">,&lt;/span> left&lt;span style="color:#f92672">,&lt;/span> mid&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> nums2 &lt;span style="color:#f92672">=&lt;/span> mergeSort&lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">,&lt;/span> mid &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">,&lt;/span> right&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//堆排序
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeapSort&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 比较 + 交换
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 建堆的时间复杂度：O(N)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 时间复杂度都一样：O(N * logN)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 思考与快排有什么区别？哪个好？
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @param nums 待排序的数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @return 已好排序数组（从小到大）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#a6e22e">sortArray&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> nums&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> heapSort&lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> nums&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 基于二叉堆中最大堆实现（抽象成完全二叉树）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 构建大顶堆
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 依次将最大元素（根节点）与待排序数组最后一个元素进行交换（二叉树最深层最右边的叶子节点）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 每次遍历，刷新最后一个元素位置（自减1），直到与首元素相交，即完成排序
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @param nums 待排序的数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">heapSort&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> nums&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> len &lt;span style="color:#f92672">=&lt;/span> nums&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//构建大顶堆 O(N)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> len&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">;&lt;/span> i &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span> i&lt;span style="color:#f92672">--)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> heapify&lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">,&lt;/span> len&lt;span style="color:#f92672">,&lt;/span> i&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> len &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">;&lt;/span> i &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">;&lt;/span> i&lt;span style="color:#f92672">--)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swap&lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> i&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//i：需要堆化的元素个数 0：下标
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> heapify&lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">,&lt;/span> i&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//自上而下的堆化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//时间复杂度：O(N * logN)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">heapify&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> nums&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> len&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> index&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//index 是父节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> left &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> right &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> maxIndex &lt;span style="color:#f92672">=&lt;/span> index&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>left &lt;span style="color:#f92672">&amp;lt;&lt;/span> len &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> nums&lt;span style="color:#f92672">[&lt;/span>left&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> nums&lt;span style="color:#f92672">[&lt;/span>maxIndex&lt;span style="color:#f92672">])&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxIndex &lt;span style="color:#f92672">=&lt;/span> left&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>right &lt;span style="color:#f92672">&amp;lt;&lt;/span> len &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> nums&lt;span style="color:#f92672">[&lt;/span>right&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> nums&lt;span style="color:#f92672">[&lt;/span>maxIndex&lt;span style="color:#f92672">])&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxIndex &lt;span style="color:#f92672">=&lt;/span> right&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>maxIndex &lt;span style="color:#f92672">!=&lt;/span> index&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swap&lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">,&lt;/span> index&lt;span style="color:#f92672">,&lt;/span> maxIndex&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> heapify&lt;span style="color:#f92672">(&lt;/span>nums&lt;span style="color:#f92672">,&lt;/span> len&lt;span style="color:#f92672">,&lt;/span> maxIndex&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">swap&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> nums&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> j&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>i &lt;span style="color:#f92672">==&lt;/span> j&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> tmp &lt;span style="color:#f92672">=&lt;/span> nums&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nums&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> nums&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nums&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> tmp&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>